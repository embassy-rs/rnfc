// WARNING:  This file was autogenerated by java-spaghetti.  Any changes to this file may be lost!!!

#![allow(unused_imports)]
#![allow(non_camel_case_types)] // We map Java inner classes to Outer_Inner
#![allow(dead_code)] // We generate structs for private Java types too, just in case.
#![allow(deprecated)] // We're generating deprecated types/methods
#![allow(non_upper_case_globals)] // We might be generating Java style fields/methods
#![allow(non_snake_case)] // We might be generating Java style fields/methods
#![allow(clippy::all)] // we don't ensure generated bindings are clippy-compliant at all.
#![allow(unsafe_code)] // play nice if user has `deny(unsafe_code)` in their crate.

mod util {
    use std::char::DecodeUtf16Error;
    use std::fmt;

    use java_spaghetti::sys::jsize;
    use java_spaghetti::{Env, JavaDebug, Local, Ref, StringChars, ThrowableType};

    use super::java::lang::{String as JString, Throwable};

    impl JavaDebug for Throwable {
        fn fmt(self: &Ref<'_, Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            writeln!(f, "java::lang::Throwable")?;

            match self.getMessage() {
                Ok(Some(message)) => writeln!(f, "    getMessage:            {:?}", message)?,
                Ok(None) => writeln!(f, "    getMessage:            N/A (returned null)")?,
                Err(_) => writeln!(f, "    getMessage:            N/A (threw an exception!)")?,
            }

            match self.getLocalizedMessage() {
                Ok(Some(message)) => writeln!(f, "    getLocalizedMessage:   {:?}", message)?,
                Ok(None) => writeln!(f, "    getLocalizedMessage:   N/A (returned null)")?,
                Err(_) => writeln!(f, "    getLocalizedMessage:   N/A (threw an exception!)")?,
            }

            match self.getStackTrace() {
                Err(_) => writeln!(f, "    getStackTrace:         N/A (threw an exception!)")?,
                Ok(None) => writeln!(f, "    getStackTrace:         N/A (returned null)")?,
                Ok(Some(stack_trace)) => {
                    writeln!(f, "    getStackTrace:")?;
                    for frame in stack_trace.iter() {
                        match frame {
                            None => writeln!(f, "        N/A (frame was null)")?,
                            Some(frame) => {
                                let file_line = match (frame.getFileName(), frame.getLineNumber()) {
                                    (Ok(Some(file)), Ok(line)) => {
                                        format!("{}({}):", file.to_string_lossy(), line)
                                    }
                                    (Ok(Some(file)), _) => format!("{}:", file.to_string_lossy()),
                                    (_, _) => "N/A (getFileName threw an exception or returned null)".to_owned(),
                                };

                                let class_method = match (frame.getClassName(), frame.getMethodName()) {
                                    (Ok(Some(class)), Ok(Some(method))) => {
                                        format!("{}.{}", class.to_string_lossy(), method.to_string_lossy())
                                    }
                                    (Ok(Some(class)), _) => class.to_string_lossy(),
                                    (_, Ok(Some(method))) => method.to_string_lossy(),
                                    (_, _) => "N/A (getClassName + getMethodName threw exceptions or returned null)".to_owned(),
                                };

                                writeln!(f, "        {:120}{}", file_line, class_method)?;
                            }
                        }
                    }
                }
            }

            // Consider also dumping:
            // API level 1+:
            //      getCause()
            // API level 19+:
            //      getSuppressed()

            Ok(())
        }
    }

    impl JString {
        /// Create new local string from an Env + AsRef<str>
        pub fn from_env_str<'env, S: AsRef<str>>(env: Env<'env>, string: S) -> Local<'env, Self> {
            let chars = string.as_ref().encode_utf16().collect::<Vec<_>>();

            let string = unsafe { env.new_string(chars.as_ptr(), chars.len() as jsize) };
            unsafe { Local::from_raw(env, string) }
        }

        fn string_chars<'env>(self: &Ref<'env, Self>) -> StringChars<'env> {
            unsafe { StringChars::from_env_jstring(self.env(), self.as_raw()) }
        }

        /// Returns a new [Ok]\([String]\), or an [Err]\([DecodeUtf16Error]\) if if it contained any invalid UTF16.
        ///
        /// [Ok]:                       https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok
        /// [Err]:                      https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err
        /// [DecodeUtf16Error]:         https://doc.rust-lang.org/std/char/struct.DecodeUtf16Error.html
        /// [String]:                   https://doc.rust-lang.org/std/string/struct.String.html
        /// [REPLACEMENT_CHARACTER]:    https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html
        pub fn to_string(self: &Ref<'_, Self>) -> Result<String, DecodeUtf16Error> {
            self.string_chars().to_string()
        }

        /// Returns a new [String] with any invalid UTF16 characters replaced with [REPLACEMENT_CHARACTER]s (`'\u{FFFD}'`.)
        ///
        /// [String]:                   https://doc.rust-lang.org/std/string/struct.String.html
        /// [REPLACEMENT_CHARACTER]:    https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html
        pub fn to_string_lossy(self: &Ref<'_, Self>) -> String {
            self.string_chars().to_string_lossy()
        }
    }

    // OsString doesn't implement Display, so neither does java::lang::String.
    impl JavaDebug for JString {
        fn fmt(self: &Ref<'_, Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::Debug::fmt(&self.to_string_lossy(), f) // XXX: Unneccessary alloc?  Shouldn't use lossy here?
        }
    }

    impl ThrowableType for Throwable {}
}

pub mod android {

    pub mod app {
        #[doc = "pub class [Activity](https://developer.android.com/reference/android/app/Activity.html)"]
        pub enum Activity {}
        unsafe impl ::java_spaghetti::ReferenceType for Activity {}
        unsafe impl ::java_spaghetti::JniType for Activity {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/app/Activity")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::view::ContextThemeWrapper> for Activity {}
        unsafe impl ::java_spaghetti::AssignableTo<super::content::ContextWrapper> for Activity {}
        unsafe impl ::java_spaghetti::AssignableTo<super::content::Context> for Activity {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Activity {}
        impl Activity {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/app/Activity"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Activity](https://developer.android.com/reference/android/app/Activity.html#Activity())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isChild](https://developer.android.com/reference/android/app/Activity.html#isChild())"]
            pub fn isChild<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isChild", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getParent](https://developer.android.com/reference/android/app/Activity.html#getParent())"]
            pub fn getParent<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Activity>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getParent",
                                c"()Landroid/app/Activity;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onStateNotSaved](https://developer.android.com/reference/android/app/Activity.html#onStateNotSaved())"]
            #[deprecated]
            pub fn onStateNotSaved<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onStateNotSaved",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onTopResumedActivityChanged](https://developer.android.com/reference/android/app/Activity.html#onTopResumedActivityChanged(boolean))"]
            pub fn onTopResumedActivityChanged<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onTopResumedActivityChanged",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isVoiceInteraction](https://developer.android.com/reference/android/app/Activity.html#isVoiceInteraction())"]
            pub fn isVoiceInteraction<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isVoiceInteraction",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isVoiceInteractionRoot](https://developer.android.com/reference/android/app/Activity.html#isVoiceInteractionRoot())"]
            pub fn isVoiceInteractionRoot<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isVoiceInteractionRoot",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLocalVoiceInteractionSupported](https://developer.android.com/reference/android/app/Activity.html#isLocalVoiceInteractionSupported())"]
            pub fn isLocalVoiceInteractionSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLocalVoiceInteractionSupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startLocalVoiceInteraction](https://developer.android.com/reference/android/app/Activity.html#startLocalVoiceInteraction(android.os.Bundle))"]
            pub fn startLocalVoiceInteraction<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::os::Bundle>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startLocalVoiceInteraction",
                                c"(Landroid/os/Bundle;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onLocalVoiceInteractionStarted](https://developer.android.com/reference/android/app/Activity.html#onLocalVoiceInteractionStarted())"]
            pub fn onLocalVoiceInteractionStarted<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onLocalVoiceInteractionStarted",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onLocalVoiceInteractionStopped](https://developer.android.com/reference/android/app/Activity.html#onLocalVoiceInteractionStopped())"]
            pub fn onLocalVoiceInteractionStopped<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onLocalVoiceInteractionStopped",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[stopLocalVoiceInteraction](https://developer.android.com/reference/android/app/Activity.html#stopLocalVoiceInteraction())"]
            pub fn stopLocalVoiceInteraction<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stopLocalVoiceInteraction",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onProvideAssistData](https://developer.android.com/reference/android/app/Activity.html#onProvideAssistData(android.os.Bundle))"]
            pub fn onProvideAssistData<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::os::Bundle>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onProvideAssistData",
                                c"(Landroid/os/Bundle;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[requestShowKeyboardShortcuts](https://developer.android.com/reference/android/app/Activity.html#requestShowKeyboardShortcuts())"]
            pub fn requestShowKeyboardShortcuts<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"requestShowKeyboardShortcuts",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[dismissKeyboardShortcutsHelper](https://developer.android.com/reference/android/app/Activity.html#dismissKeyboardShortcutsHelper())"]
            pub fn dismissKeyboardShortcutsHelper<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"dismissKeyboardShortcutsHelper",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[showAssist](https://developer.android.com/reference/android/app/Activity.html#showAssist(android.os.Bundle))"]
            pub fn showAssist<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::os::Bundle>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"showAssist",
                                c"(Landroid/os/Bundle;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[reportFullyDrawn](https://developer.android.com/reference/android/app/Activity.html#reportFullyDrawn())"]
            pub fn reportFullyDrawn<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"reportFullyDrawn",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onMultiWindowModeChanged](https://developer.android.com/reference/android/app/Activity.html#onMultiWindowModeChanged(boolean))"]
            #[deprecated]
            pub fn onMultiWindowModeChanged_boolean<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onMultiWindowModeChanged",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isInMultiWindowMode](https://developer.android.com/reference/android/app/Activity.html#isInMultiWindowMode())"]
            pub fn isInMultiWindowMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isInMultiWindowMode",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onPictureInPictureModeChanged](https://developer.android.com/reference/android/app/Activity.html#onPictureInPictureModeChanged(boolean))"]
            #[deprecated]
            pub fn onPictureInPictureModeChanged_boolean<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onPictureInPictureModeChanged",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isInPictureInPictureMode](https://developer.android.com/reference/android/app/Activity.html#isInPictureInPictureMode())"]
            pub fn isInPictureInPictureMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isInPictureInPictureMode",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enterPictureInPictureMode](https://developer.android.com/reference/android/app/Activity.html#enterPictureInPictureMode())"]
            #[deprecated]
            pub fn enterPictureInPictureMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enterPictureInPictureMode",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMaxNumPictureInPictureActions](https://developer.android.com/reference/android/app/Activity.html#getMaxNumPictureInPictureActions())"]
            pub fn getMaxNumPictureInPictureActions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMaxNumPictureInPictureActions",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onPictureInPictureRequested](https://developer.android.com/reference/android/app/Activity.html#onPictureInPictureRequested())"]
            pub fn onPictureInPictureRequested<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onPictureInPictureRequested",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setShouldDockBigOverlays](https://developer.android.com/reference/android/app/Activity.html#setShouldDockBigOverlays(boolean))"]
            pub fn setShouldDockBigOverlays<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setShouldDockBigOverlays",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[shouldDockBigOverlays](https://developer.android.com/reference/android/app/Activity.html#shouldDockBigOverlays())"]
            pub fn shouldDockBigOverlays<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"shouldDockBigOverlays",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getChangingConfigurations](https://developer.android.com/reference/android/app/Activity.html#getChangingConfigurations())"]
            pub fn getChangingConfigurations<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getChangingConfigurations",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getLastNonConfigurationInstance](https://developer.android.com/reference/android/app/Activity.html#getLastNonConfigurationInstance())"]
            pub fn getLastNonConfigurationInstance<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLastNonConfigurationInstance",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onRetainNonConfigurationInstance](https://developer.android.com/reference/android/app/Activity.html#onRetainNonConfigurationInstance())"]
            pub fn onRetainNonConfigurationInstance<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onRetainNonConfigurationInstance",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onLowMemory](https://developer.android.com/reference/android/app/Activity.html#onLowMemory())"]
            pub fn onLowMemory<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"onLowMemory", c"()V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onTrimMemory](https://developer.android.com/reference/android/app/Activity.html#onTrimMemory(int))"]
            pub fn onTrimMemory<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onTrimMemory",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setContentView](https://developer.android.com/reference/android/app/Activity.html#setContentView(int))"]
            pub fn setContentView_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setContentView",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setFinishOnTouchOutside](https://developer.android.com/reference/android/app/Activity.html#setFinishOnTouchOutside(boolean))"]
            pub fn setFinishOnTouchOutside<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setFinishOnTouchOutside",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setDefaultKeyMode](https://developer.android.com/reference/android/app/Activity.html#setDefaultKeyMode(int))"]
            pub fn setDefaultKeyMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setDefaultKeyMode",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onBackPressed](https://developer.android.com/reference/android/app/Activity.html#onBackPressed())"]
            #[deprecated]
            pub fn onBackPressed<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onBackPressed",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onUserInteraction](https://developer.android.com/reference/android/app/Activity.html#onUserInteraction())"]
            pub fn onUserInteraction<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onUserInteraction",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onContentChanged](https://developer.android.com/reference/android/app/Activity.html#onContentChanged())"]
            pub fn onContentChanged<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onContentChanged",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onWindowFocusChanged](https://developer.android.com/reference/android/app/Activity.html#onWindowFocusChanged(boolean))"]
            pub fn onWindowFocusChanged<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onWindowFocusChanged",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onAttachedToWindow](https://developer.android.com/reference/android/app/Activity.html#onAttachedToWindow())"]
            pub fn onAttachedToWindow<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onAttachedToWindow",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onDetachedFromWindow](https://developer.android.com/reference/android/app/Activity.html#onDetachedFromWindow())"]
            pub fn onDetachedFromWindow<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onDetachedFromWindow",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hasWindowFocus](https://developer.android.com/reference/android/app/Activity.html#hasWindowFocus())"]
            pub fn hasWindowFocus<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hasWindowFocus",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[invalidateOptionsMenu](https://developer.android.com/reference/android/app/Activity.html#invalidateOptionsMenu())"]
            pub fn invalidateOptionsMenu<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"invalidateOptionsMenu",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onNavigateUp](https://developer.android.com/reference/android/app/Activity.html#onNavigateUp())"]
            pub fn onNavigateUp<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onNavigateUp",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onNavigateUpFromChild](https://developer.android.com/reference/android/app/Activity.html#onNavigateUpFromChild(android.app.Activity))"]
            #[deprecated]
            pub fn onNavigateUpFromChild<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Activity>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onNavigateUpFromChild",
                                c"(Landroid/app/Activity;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[openOptionsMenu](https://developer.android.com/reference/android/app/Activity.html#openOptionsMenu())"]
            pub fn openOptionsMenu<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"openOptionsMenu",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[closeOptionsMenu](https://developer.android.com/reference/android/app/Activity.html#closeOptionsMenu())"]
            pub fn closeOptionsMenu<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"closeOptionsMenu",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[closeContextMenu](https://developer.android.com/reference/android/app/Activity.html#closeContextMenu())"]
            pub fn closeContextMenu<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"closeContextMenu",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[showDialog](https://developer.android.com/reference/android/app/Activity.html#showDialog(int))"]
            #[deprecated]
            pub fn showDialog_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"showDialog", c"(I)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[showDialog](https://developer.android.com/reference/android/app/Activity.html#showDialog(int,%20android.os.Bundle))"]
            #[deprecated]
            pub fn showDialog_int_Bundle<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::os::Bundle>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"showDialog",
                                c"(ILandroid/os/Bundle;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[dismissDialog](https://developer.android.com/reference/android/app/Activity.html#dismissDialog(int))"]
            #[deprecated]
            pub fn dismissDialog<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"dismissDialog",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[removeDialog](https://developer.android.com/reference/android/app/Activity.html#removeDialog(int))"]
            #[deprecated]
            pub fn removeDialog<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"removeDialog",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onSearchRequested](https://developer.android.com/reference/android/app/Activity.html#onSearchRequested())"]
            pub fn onSearchRequested<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onSearchRequested",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startSearch](https://developer.android.com/reference/android/app/Activity.html#startSearch(java.lang.String,%20boolean,%20android.os.Bundle,%20boolean))"]
            pub fn startSearch<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: bool,
                arg2: impl ::java_spaghetti::AsArg<super::os::Bundle>,
                arg3: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startSearch",
                                c"(Ljava/lang/String;ZLandroid/os/Bundle;Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[triggerSearch](https://developer.android.com/reference/android/app/Activity.html#triggerSearch(java.lang.String,%20android.os.Bundle))"]
            pub fn triggerSearch<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::os::Bundle>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"triggerSearch",
                                c"(Ljava/lang/String;Landroid/os/Bundle;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[takeKeyEvents](https://developer.android.com/reference/android/app/Activity.html#takeKeyEvents(boolean))"]
            pub fn takeKeyEvents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"takeKeyEvents",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[requestWindowFeature](https://developer.android.com/reference/android/app/Activity.html#requestWindowFeature(int))"]
            pub fn requestWindowFeature<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"requestWindowFeature",
                                c"(I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setFeatureDrawableResource](https://developer.android.com/reference/android/app/Activity.html#setFeatureDrawableResource(int,%20int))"]
            pub fn setFeatureDrawableResource<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setFeatureDrawableResource",
                                c"(II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setFeatureDrawableAlpha](https://developer.android.com/reference/android/app/Activity.html#setFeatureDrawableAlpha(int,%20int))"]
            pub fn setFeatureDrawableAlpha<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setFeatureDrawableAlpha",
                                c"(II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTheme](https://developer.android.com/reference/android/app/Activity.html#setTheme(int))"]
            pub fn setTheme<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"setTheme", c"(I)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[requestPermissions](https://developer.android.com/reference/android/app/Activity.html#requestPermissions(java.lang.String[],%20int))"]
            pub fn requestPermissions<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::super::java::lang::String, super::super::java::lang::Throwable>,
                >,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"requestPermissions",
                                c"([Ljava/lang/String;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onRequestPermissionsResult](https://developer.android.com/reference/android/app/Activity.html#onRequestPermissionsResult(int,%20java.lang.String[],%20int[]))"]
            pub fn onRequestPermissionsResult<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::super::java::lang::String, super::super::java::lang::Throwable>,
                >,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onRequestPermissionsResult",
                                c"(I[Ljava/lang/String;[I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[shouldShowRequestPermissionRationale](https://developer.android.com/reference/android/app/Activity.html#shouldShowRequestPermissionRationale(java.lang.String))"]
            pub fn shouldShowRequestPermissionRationale<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"shouldShowRequestPermissionRationale",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isActivityTransitionRunning](https://developer.android.com/reference/android/app/Activity.html#isActivityTransitionRunning())"]
            pub fn isActivityTransitionRunning<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isActivityTransitionRunning",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[overridePendingTransition](https://developer.android.com/reference/android/app/Activity.html#overridePendingTransition(int,%20int))"]
            pub fn overridePendingTransition_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"overridePendingTransition",
                                c"(II)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[overridePendingTransition](https://developer.android.com/reference/android/app/Activity.html#overridePendingTransition(int,%20int,%20int))"]
            pub fn overridePendingTransition_int_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"overridePendingTransition",
                                c"(III)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setResult](https://developer.android.com/reference/android/app/Activity.html#setResult(int))"]
            pub fn setResult_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"setResult", c"(I)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCallingPackage](https://developer.android.com/reference/android/app/Activity.html#getCallingPackage())"]
            pub fn getCallingPackage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCallingPackage",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setVisible](https://developer.android.com/reference/android/app/Activity.html#setVisible(boolean))"]
            pub fn setVisible<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"setVisible", c"(Z)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isFinishing](https://developer.android.com/reference/android/app/Activity.html#isFinishing())"]
            pub fn isFinishing<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isFinishing", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isDestroyed](https://developer.android.com/reference/android/app/Activity.html#isDestroyed())"]
            pub fn isDestroyed<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isDestroyed", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isChangingConfigurations](https://developer.android.com/reference/android/app/Activity.html#isChangingConfigurations())"]
            pub fn isChangingConfigurations<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isChangingConfigurations",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[recreate](https://developer.android.com/reference/android/app/Activity.html#recreate())"]
            pub fn recreate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"recreate", c"()V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[finish](https://developer.android.com/reference/android/app/Activity.html#finish())"]
            pub fn finish<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"finish", c"()V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[finishAffinity](https://developer.android.com/reference/android/app/Activity.html#finishAffinity())"]
            pub fn finishAffinity<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"finishAffinity",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[finishFromChild](https://developer.android.com/reference/android/app/Activity.html#finishFromChild(android.app.Activity))"]
            #[deprecated]
            pub fn finishFromChild<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Activity>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"finishFromChild",
                                c"(Landroid/app/Activity;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[finishAfterTransition](https://developer.android.com/reference/android/app/Activity.html#finishAfterTransition())"]
            pub fn finishAfterTransition<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"finishAfterTransition",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[finishActivity](https://developer.android.com/reference/android/app/Activity.html#finishActivity(int))"]
            pub fn finishActivity<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"finishActivity",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[finishActivityFromChild](https://developer.android.com/reference/android/app/Activity.html#finishActivityFromChild(android.app.Activity,%20int))"]
            #[deprecated]
            pub fn finishActivityFromChild<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Activity>,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"finishActivityFromChild",
                                c"(Landroid/app/Activity;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[finishAndRemoveTask](https://developer.android.com/reference/android/app/Activity.html#finishAndRemoveTask())"]
            pub fn finishAndRemoveTask<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"finishAndRemoveTask",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[releaseInstance](https://developer.android.com/reference/android/app/Activity.html#releaseInstance())"]
            pub fn releaseInstance<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"releaseInstance",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setRequestedOrientation](https://developer.android.com/reference/android/app/Activity.html#setRequestedOrientation(int))"]
            pub fn setRequestedOrientation<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setRequestedOrientation",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getRequestedOrientation](https://developer.android.com/reference/android/app/Activity.html#getRequestedOrientation())"]
            pub fn getRequestedOrientation<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getRequestedOrientation",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getTaskId](https://developer.android.com/reference/android/app/Activity.html#getTaskId())"]
            pub fn getTaskId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getTaskId", c"()I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isTaskRoot](https://developer.android.com/reference/android/app/Activity.html#isTaskRoot())"]
            pub fn isTaskRoot<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isTaskRoot", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveTaskToBack](https://developer.android.com/reference/android/app/Activity.html#moveTaskToBack(boolean))"]
            pub fn moveTaskToBack<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveTaskToBack",
                                c"(Z)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getLocalClassName](https://developer.android.com/reference/android/app/Activity.html#getLocalClassName())"]
            pub fn getLocalClassName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLocalClassName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isLaunchedFromBubble](https://developer.android.com/reference/android/app/Activity.html#isLaunchedFromBubble())"]
            pub fn isLaunchedFromBubble<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isLaunchedFromBubble",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemService](https://developer.android.com/reference/android/app/Activity.html#getSystemService(java.lang.String))"]
            pub fn getSystemService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemService",
                                c"(Ljava/lang/String;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTitle](https://developer.android.com/reference/android/app/Activity.html#setTitle(int))"]
            pub fn setTitle_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"setTitle", c"(I)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTitleColor](https://developer.android.com/reference/android/app/Activity.html#setTitleColor(int))"]
            #[deprecated]
            pub fn setTitleColor<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setTitleColor",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getTitleColor](https://developer.android.com/reference/android/app/Activity.html#getTitleColor())"]
            pub fn getTitleColor<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getTitleColor",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setProgressBarVisibility](https://developer.android.com/reference/android/app/Activity.html#setProgressBarVisibility(boolean))"]
            #[deprecated]
            pub fn setProgressBarVisibility<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setProgressBarVisibility",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setProgressBarIndeterminateVisibility](https://developer.android.com/reference/android/app/Activity.html#setProgressBarIndeterminateVisibility(boolean))"]
            #[deprecated]
            pub fn setProgressBarIndeterminateVisibility<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setProgressBarIndeterminateVisibility",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setProgressBarIndeterminate](https://developer.android.com/reference/android/app/Activity.html#setProgressBarIndeterminate(boolean))"]
            #[deprecated]
            pub fn setProgressBarIndeterminate<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setProgressBarIndeterminate",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setProgress](https://developer.android.com/reference/android/app/Activity.html#setProgress(int))"]
            #[deprecated]
            pub fn setProgress<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setProgress",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setSecondaryProgress](https://developer.android.com/reference/android/app/Activity.html#setSecondaryProgress(int))"]
            #[deprecated]
            pub fn setSecondaryProgress<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setSecondaryProgress",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setVolumeControlStream](https://developer.android.com/reference/android/app/Activity.html#setVolumeControlStream(int))"]
            pub fn setVolumeControlStream<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setVolumeControlStream",
                                c"(I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getVolumeControlStream](https://developer.android.com/reference/android/app/Activity.html#getVolumeControlStream())"]
            pub fn getVolumeControlStream<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getVolumeControlStream",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isImmersive](https://developer.android.com/reference/android/app/Activity.html#isImmersive())"]
            pub fn isImmersive<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isImmersive", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTranslucent](https://developer.android.com/reference/android/app/Activity.html#setTranslucent(boolean))"]
            pub fn setTranslucent<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setTranslucent",
                                c"(Z)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[requestVisibleBehind](https://developer.android.com/reference/android/app/Activity.html#requestVisibleBehind(boolean))"]
            #[deprecated]
            pub fn requestVisibleBehind<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"requestVisibleBehind",
                                c"(Z)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onVisibleBehindCanceled](https://developer.android.com/reference/android/app/Activity.html#onVisibleBehindCanceled())"]
            #[deprecated]
            pub fn onVisibleBehindCanceled<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onVisibleBehindCanceled",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[onEnterAnimationComplete](https://developer.android.com/reference/android/app/Activity.html#onEnterAnimationComplete())"]
            pub fn onEnterAnimationComplete<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onEnterAnimationComplete",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setImmersive](https://developer.android.com/reference/android/app/Activity.html#setImmersive(boolean))"]
            pub fn setImmersive<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setImmersive",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[postponeEnterTransition](https://developer.android.com/reference/android/app/Activity.html#postponeEnterTransition())"]
            pub fn postponeEnterTransition<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"postponeEnterTransition",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startPostponedEnterTransition](https://developer.android.com/reference/android/app/Activity.html#startPostponedEnterTransition())"]
            pub fn startPostponedEnterTransition<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startPostponedEnterTransition",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startLockTask](https://developer.android.com/reference/android/app/Activity.html#startLockTask())"]
            pub fn startLockTask<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startLockTask",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[stopLockTask](https://developer.android.com/reference/android/app/Activity.html#stopLockTask())"]
            pub fn stopLockTask<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stopLockTask",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[showLockTaskEscapeMessage](https://developer.android.com/reference/android/app/Activity.html#showLockTaskEscapeMessage())"]
            pub fn showLockTaskEscapeMessage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"showLockTaskEscapeMessage",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setRecentsScreenshotEnabled](https://developer.android.com/reference/android/app/Activity.html#setRecentsScreenshotEnabled(boolean))"]
            pub fn setRecentsScreenshotEnabled<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setRecentsScreenshotEnabled",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setShowWhenLocked](https://developer.android.com/reference/android/app/Activity.html#setShowWhenLocked(boolean))"]
            pub fn setShowWhenLocked<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setShowWhenLocked",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setInheritShowWhenLocked](https://developer.android.com/reference/android/app/Activity.html#setInheritShowWhenLocked(boolean))"]
            pub fn setInheritShowWhenLocked<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setInheritShowWhenLocked",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTurnScreenOn](https://developer.android.com/reference/android/app/Activity.html#setTurnScreenOn(boolean))"]
            pub fn setTurnScreenOn<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setTurnScreenOn",
                                c"(Z)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [DEFAULT_KEYS_DIALER](https://developer.android.com/reference/android/app/Activity.html#DEFAULT_KEYS_DIALER)"]
            pub const DEFAULT_KEYS_DIALER: i32 = 1;
            #[doc = "public static final [DEFAULT_KEYS_DISABLE](https://developer.android.com/reference/android/app/Activity.html#DEFAULT_KEYS_DISABLE)"]
            pub const DEFAULT_KEYS_DISABLE: i32 = 0;
            #[doc = "public static final [DEFAULT_KEYS_SEARCH_GLOBAL](https://developer.android.com/reference/android/app/Activity.html#DEFAULT_KEYS_SEARCH_GLOBAL)"]
            pub const DEFAULT_KEYS_SEARCH_GLOBAL: i32 = 4;
            #[doc = "public static final [DEFAULT_KEYS_SEARCH_LOCAL](https://developer.android.com/reference/android/app/Activity.html#DEFAULT_KEYS_SEARCH_LOCAL)"]
            pub const DEFAULT_KEYS_SEARCH_LOCAL: i32 = 3;
            #[doc = "public static final [DEFAULT_KEYS_SHORTCUT](https://developer.android.com/reference/android/app/Activity.html#DEFAULT_KEYS_SHORTCUT)"]
            pub const DEFAULT_KEYS_SHORTCUT: i32 = 2;
            #[doc = "public static final [RESULT_CANCELED](https://developer.android.com/reference/android/app/Activity.html#RESULT_CANCELED)"]
            pub const RESULT_CANCELED: i32 = 0;
            #[doc = "public static final [RESULT_FIRST_USER](https://developer.android.com/reference/android/app/Activity.html#RESULT_FIRST_USER)"]
            pub const RESULT_FIRST_USER: i32 = 1;
            #[doc = "public static final [RESULT_OK](https://developer.android.com/reference/android/app/Activity.html#RESULT_OK)"]
            pub const RESULT_OK: i32 = -1;
        }
    }

    pub mod content {
        #[doc = "pub class [Context](https://developer.android.com/reference/android/content/Context.html)"]
        pub enum Context {}
        unsafe impl ::java_spaghetti::ReferenceType for Context {}
        unsafe impl ::java_spaghetti::JniType for Context {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/content/Context")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Context {}
        impl Context {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/content/Context"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Context](https://developer.android.com/reference/android/content/Context.html#Context())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getApplicationContext](https://developer.android.com/reference/android/content/Context.html#getApplicationContext())"]
            pub fn getApplicationContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getApplicationContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getString](https://developer.android.com/reference/android/content/Context.html#getString(int))"]
            pub fn getString_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getString",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getString](https://developer.android.com/reference/android/content/Context.html#getString(int,%20java.lang.Object...))"]
            pub fn getString_int_Object_array<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::super::java::lang::Object, super::super::java::lang::Throwable>,
                >,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getString",
                                c"(I[Ljava/lang/Object;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getColor](https://developer.android.com/reference/android/content/Context.html#getColor(int))"]
            pub fn getColor<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getColor", c"(I)I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTheme](https://developer.android.com/reference/android/content/Context.html#setTheme(int))"]
            pub fn setTheme<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"setTheme", c"(I)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageName](https://developer.android.com/reference/android/content/Context.html#getPackageName())"]
            pub fn getPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOpPackageName](https://developer.android.com/reference/android/content/Context.html#getOpPackageName())"]
            pub fn getOpPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOpPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getAttributionTag](https://developer.android.com/reference/android/content/Context.html#getAttributionTag())"]
            pub fn getAttributionTag<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAttributionTag",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageResourcePath](https://developer.android.com/reference/android/content/Context.html#getPackageResourcePath())"]
            pub fn getPackageResourcePath<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageResourcePath",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageCodePath](https://developer.android.com/reference/android/content/Context.html#getPackageCodePath())"]
            pub fn getPackageCodePath<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageCodePath",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveSharedPreferencesFrom](https://developer.android.com/reference/android/content/Context.html#moveSharedPreferencesFrom(android.content.Context,%20java.lang.String))"]
            pub fn moveSharedPreferencesFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveSharedPreferencesFrom",
                                c"(Landroid/content/Context;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteSharedPreferences](https://developer.android.com/reference/android/content/Context.html#deleteSharedPreferences(java.lang.String))"]
            pub fn deleteSharedPreferences<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteSharedPreferences",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteFile](https://developer.android.com/reference/android/content/Context.html#deleteFile(java.lang.String))"]
            pub fn deleteFile<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteFile",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[fileList](https://developer.android.com/reference/android/content/Context.html#fileList())"]
            pub fn fileList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::super::java::lang::String, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"fileList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveDatabaseFrom](https://developer.android.com/reference/android/content/Context.html#moveDatabaseFrom(android.content.Context,%20java.lang.String))"]
            pub fn moveDatabaseFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveDatabaseFrom",
                                c"(Landroid/content/Context;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteDatabase](https://developer.android.com/reference/android/content/Context.html#deleteDatabase(java.lang.String))"]
            pub fn deleteDatabase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteDatabase",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[databaseList](https://developer.android.com/reference/android/content/Context.html#databaseList())"]
            pub fn databaseList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::super::java::lang::String, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"databaseList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWallpaperDesiredMinimumWidth](https://developer.android.com/reference/android/content/Context.html#getWallpaperDesiredMinimumWidth())"]
            #[deprecated]
            pub fn getWallpaperDesiredMinimumWidth<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWallpaperDesiredMinimumWidth",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWallpaperDesiredMinimumHeight](https://developer.android.com/reference/android/content/Context.html#getWallpaperDesiredMinimumHeight())"]
            #[deprecated]
            pub fn getWallpaperDesiredMinimumHeight<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWallpaperDesiredMinimumHeight",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clearWallpaper](https://developer.android.com/reference/android/content/Context.html#clearWallpaper())"]
            #[deprecated]
            pub fn clearWallpaper<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clearWallpaper",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemService](https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String))"]
            pub fn getSystemService_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemService",
                                c"(Ljava/lang/String;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkPermission](https://developer.android.com/reference/android/content/Context.html#checkPermission(java.lang.String,%20int,%20int))"]
            pub fn checkPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkPermission",
                                c"(Ljava/lang/String;II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingPermission(java.lang.String))"]
            pub fn checkCallingPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingOrSelfPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingOrSelfPermission(java.lang.String))"]
            pub fn checkCallingOrSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingOrSelfPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkSelfPermission](https://developer.android.com/reference/android/content/Context.html#checkSelfPermission(java.lang.String))"]
            pub fn checkSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkSelfPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforcePermission](https://developer.android.com/reference/android/content/Context.html#enforcePermission(java.lang.String,%20int,%20int,%20java.lang.String))"]
            pub fn enforcePermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforcePermission",
                                c"(Ljava/lang/String;IILjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforceCallingPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingPermission(java.lang.String,%20java.lang.String))"]
            pub fn enforceCallingPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforceCallingPermission",
                                c"(Ljava/lang/String;Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforceCallingOrSelfPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingOrSelfPermission(java.lang.String,%20java.lang.String))"]
            pub fn enforceCallingOrSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforceCallingOrSelfPermission",
                                c"(Ljava/lang/String;Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[revokeSelfPermissionOnKill](https://developer.android.com/reference/android/content/Context.html#revokeSelfPermissionOnKill(java.lang.String))"]
            pub fn revokeSelfPermissionOnKill<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"revokeSelfPermissionOnKill",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createPackageContext](https://developer.android.com/reference/android/content/Context.html#createPackageContext(java.lang.String,%20int))"]
            pub fn createPackageContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createPackageContext",
                                c"(Ljava/lang/String;I)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createContextForSplit](https://developer.android.com/reference/android/content/Context.html#createContextForSplit(java.lang.String))"]
            pub fn createContextForSplit<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createContextForSplit",
                                c"(Ljava/lang/String;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createWindowContext](https://developer.android.com/reference/android/content/Context.html#createWindowContext(int,%20android.os.Bundle))"]
            pub fn createWindowContext_int_Bundle<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::os::Bundle>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createWindowContext",
                                c"(ILandroid/os/Bundle;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createAttributionContext](https://developer.android.com/reference/android/content/Context.html#createAttributionContext(java.lang.String))"]
            pub fn createAttributionContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createAttributionContext",
                                c"(Ljava/lang/String;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createDeviceProtectedStorageContext](https://developer.android.com/reference/android/content/Context.html#createDeviceProtectedStorageContext())"]
            pub fn createDeviceProtectedStorageContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createDeviceProtectedStorageContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isRestricted](https://developer.android.com/reference/android/content/Context.html#isRestricted())"]
            pub fn isRestricted<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isRestricted",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isDeviceProtectedStorage](https://developer.android.com/reference/android/content/Context.html#isDeviceProtectedStorage())"]
            pub fn isDeviceProtectedStorage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isDeviceProtectedStorage",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isUiContext](https://developer.android.com/reference/android/content/Context.html#isUiContext())"]
            pub fn isUiContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isUiContext", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACCESSIBILITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACCESSIBILITY_SERVICE)"]
            pub const ACCESSIBILITY_SERVICE: &'static str = "accessibility";
            #[doc = "public static final [ACCOUNT_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACCOUNT_SERVICE)"]
            pub const ACCOUNT_SERVICE: &'static str = "account";
            #[doc = "public static final [ACTIVITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACTIVITY_SERVICE)"]
            pub const ACTIVITY_SERVICE: &'static str = "activity";
            #[doc = "public static final [ALARM_SERVICE](https://developer.android.com/reference/android/content/Context.html#ALARM_SERVICE)"]
            pub const ALARM_SERVICE: &'static str = "alarm";
            #[doc = "public static final [APPWIDGET_SERVICE](https://developer.android.com/reference/android/content/Context.html#APPWIDGET_SERVICE)"]
            pub const APPWIDGET_SERVICE: &'static str = "appwidget";
            #[doc = "public static final [APP_OPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#APP_OPS_SERVICE)"]
            pub const APP_OPS_SERVICE: &'static str = "appops";
            #[doc = "public static final [APP_SEARCH_SERVICE](https://developer.android.com/reference/android/content/Context.html#APP_SEARCH_SERVICE)"]
            pub const APP_SEARCH_SERVICE: &'static str = "app_search";
            #[doc = "public static final [AUDIO_SERVICE](https://developer.android.com/reference/android/content/Context.html#AUDIO_SERVICE)"]
            pub const AUDIO_SERVICE: &'static str = "audio";
            #[doc = "public static final [BATTERY_SERVICE](https://developer.android.com/reference/android/content/Context.html#BATTERY_SERVICE)"]
            pub const BATTERY_SERVICE: &'static str = "batterymanager";
            #[doc = "public static final [BIND_ABOVE_CLIENT](https://developer.android.com/reference/android/content/Context.html#BIND_ABOVE_CLIENT)"]
            pub const BIND_ABOVE_CLIENT: i32 = 8;
            #[doc = "public static final [BIND_ADJUST_WITH_ACTIVITY](https://developer.android.com/reference/android/content/Context.html#BIND_ADJUST_WITH_ACTIVITY)"]
            pub const BIND_ADJUST_WITH_ACTIVITY: i32 = 128;
            #[doc = "public static final [BIND_ALLOW_OOM_MANAGEMENT](https://developer.android.com/reference/android/content/Context.html#BIND_ALLOW_OOM_MANAGEMENT)"]
            pub const BIND_ALLOW_OOM_MANAGEMENT: i32 = 16;
            #[doc = "public static final [BIND_AUTO_CREATE](https://developer.android.com/reference/android/content/Context.html#BIND_AUTO_CREATE)"]
            pub const BIND_AUTO_CREATE: i32 = 1;
            #[doc = "public static final [BIND_DEBUG_UNBIND](https://developer.android.com/reference/android/content/Context.html#BIND_DEBUG_UNBIND)"]
            pub const BIND_DEBUG_UNBIND: i32 = 2;
            #[doc = "public static final [BIND_EXTERNAL_SERVICE](https://developer.android.com/reference/android/content/Context.html#BIND_EXTERNAL_SERVICE)"]
            pub const BIND_EXTERNAL_SERVICE: i32 = -2147483648;
            #[doc = "public static final [BIND_IMPORTANT](https://developer.android.com/reference/android/content/Context.html#BIND_IMPORTANT)"]
            pub const BIND_IMPORTANT: i32 = 64;
            #[doc = "public static final [BIND_INCLUDE_CAPABILITIES](https://developer.android.com/reference/android/content/Context.html#BIND_INCLUDE_CAPABILITIES)"]
            pub const BIND_INCLUDE_CAPABILITIES: i32 = 4096;
            #[doc = "public static final [BIND_NOT_FOREGROUND](https://developer.android.com/reference/android/content/Context.html#BIND_NOT_FOREGROUND)"]
            pub const BIND_NOT_FOREGROUND: i32 = 4;
            #[doc = "public static final [BIND_NOT_PERCEPTIBLE](https://developer.android.com/reference/android/content/Context.html#BIND_NOT_PERCEPTIBLE)"]
            pub const BIND_NOT_PERCEPTIBLE: i32 = 256;
            #[doc = "public static final [BIND_WAIVE_PRIORITY](https://developer.android.com/reference/android/content/Context.html#BIND_WAIVE_PRIORITY)"]
            pub const BIND_WAIVE_PRIORITY: i32 = 32;
            #[doc = "public static final [BIOMETRIC_SERVICE](https://developer.android.com/reference/android/content/Context.html#BIOMETRIC_SERVICE)"]
            pub const BIOMETRIC_SERVICE: &'static str = "biometric";
            #[doc = "public static final [BLOB_STORE_SERVICE](https://developer.android.com/reference/android/content/Context.html#BLOB_STORE_SERVICE)"]
            pub const BLOB_STORE_SERVICE: &'static str = "blob_store";
            #[doc = "public static final [BLUETOOTH_SERVICE](https://developer.android.com/reference/android/content/Context.html#BLUETOOTH_SERVICE)"]
            pub const BLUETOOTH_SERVICE: &'static str = "bluetooth";
            #[doc = "public static final [BUGREPORT_SERVICE](https://developer.android.com/reference/android/content/Context.html#BUGREPORT_SERVICE)"]
            pub const BUGREPORT_SERVICE: &'static str = "bugreport";
            #[doc = "public static final [CAMERA_SERVICE](https://developer.android.com/reference/android/content/Context.html#CAMERA_SERVICE)"]
            pub const CAMERA_SERVICE: &'static str = "camera";
            #[doc = "public static final [CAPTIONING_SERVICE](https://developer.android.com/reference/android/content/Context.html#CAPTIONING_SERVICE)"]
            pub const CAPTIONING_SERVICE: &'static str = "captioning";
            #[doc = "public static final [CARRIER_CONFIG_SERVICE](https://developer.android.com/reference/android/content/Context.html#CARRIER_CONFIG_SERVICE)"]
            pub const CARRIER_CONFIG_SERVICE: &'static str = "carrier_config";
            #[doc = "public static final [CLIPBOARD_SERVICE](https://developer.android.com/reference/android/content/Context.html#CLIPBOARD_SERVICE)"]
            pub const CLIPBOARD_SERVICE: &'static str = "clipboard";
            #[doc = "public static final [COMPANION_DEVICE_SERVICE](https://developer.android.com/reference/android/content/Context.html#COMPANION_DEVICE_SERVICE)"]
            pub const COMPANION_DEVICE_SERVICE: &'static str = "companiondevice";
            #[doc = "public static final [CONNECTIVITY_DIAGNOSTICS_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONNECTIVITY_DIAGNOSTICS_SERVICE)"]
            pub const CONNECTIVITY_DIAGNOSTICS_SERVICE: &'static str = "connectivity_diagnostics";
            #[doc = "public static final [CONNECTIVITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONNECTIVITY_SERVICE)"]
            pub const CONNECTIVITY_SERVICE: &'static str = "connectivity";
            #[doc = "public static final [CONSUMER_IR_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONSUMER_IR_SERVICE)"]
            pub const CONSUMER_IR_SERVICE: &'static str = "consumer_ir";
            #[doc = "public static final [CONTEXT_IGNORE_SECURITY](https://developer.android.com/reference/android/content/Context.html#CONTEXT_IGNORE_SECURITY)"]
            pub const CONTEXT_IGNORE_SECURITY: i32 = 2;
            #[doc = "public static final [CONTEXT_INCLUDE_CODE](https://developer.android.com/reference/android/content/Context.html#CONTEXT_INCLUDE_CODE)"]
            pub const CONTEXT_INCLUDE_CODE: i32 = 1;
            #[doc = "public static final [CONTEXT_RESTRICTED](https://developer.android.com/reference/android/content/Context.html#CONTEXT_RESTRICTED)"]
            pub const CONTEXT_RESTRICTED: i32 = 4;
            #[doc = "public static final [CROSS_PROFILE_APPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#CROSS_PROFILE_APPS_SERVICE)"]
            pub const CROSS_PROFILE_APPS_SERVICE: &'static str = "crossprofileapps";
            #[doc = "public static final [DEVICE_POLICY_SERVICE](https://developer.android.com/reference/android/content/Context.html#DEVICE_POLICY_SERVICE)"]
            pub const DEVICE_POLICY_SERVICE: &'static str = "device_policy";
            #[doc = "public static final [DISPLAY_HASH_SERVICE](https://developer.android.com/reference/android/content/Context.html#DISPLAY_HASH_SERVICE)"]
            pub const DISPLAY_HASH_SERVICE: &'static str = "display_hash";
            #[doc = "public static final [DISPLAY_SERVICE](https://developer.android.com/reference/android/content/Context.html#DISPLAY_SERVICE)"]
            pub const DISPLAY_SERVICE: &'static str = "display";
            #[doc = "public static final [DOMAIN_VERIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#DOMAIN_VERIFICATION_SERVICE)"]
            pub const DOMAIN_VERIFICATION_SERVICE: &'static str = "domain_verification";
            #[doc = "public static final [DOWNLOAD_SERVICE](https://developer.android.com/reference/android/content/Context.html#DOWNLOAD_SERVICE)"]
            pub const DOWNLOAD_SERVICE: &'static str = "download";
            #[doc = "public static final [DROPBOX_SERVICE](https://developer.android.com/reference/android/content/Context.html#DROPBOX_SERVICE)"]
            pub const DROPBOX_SERVICE: &'static str = "dropbox";
            #[doc = "public static final [EUICC_SERVICE](https://developer.android.com/reference/android/content/Context.html#EUICC_SERVICE)"]
            pub const EUICC_SERVICE: &'static str = "euicc";
            #[doc = "public static final [FILE_INTEGRITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#FILE_INTEGRITY_SERVICE)"]
            pub const FILE_INTEGRITY_SERVICE: &'static str = "file_integrity";
            #[doc = "public static final [FINGERPRINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#FINGERPRINT_SERVICE)"]
            pub const FINGERPRINT_SERVICE: &'static str = "fingerprint";
            #[doc = "public static final [GAME_SERVICE](https://developer.android.com/reference/android/content/Context.html#GAME_SERVICE)"]
            pub const GAME_SERVICE: &'static str = "game";
            #[doc = "public static final [HARDWARE_PROPERTIES_SERVICE](https://developer.android.com/reference/android/content/Context.html#HARDWARE_PROPERTIES_SERVICE)"]
            pub const HARDWARE_PROPERTIES_SERVICE: &'static str = "hardware_properties";
            #[doc = "public static final [INPUT_METHOD_SERVICE](https://developer.android.com/reference/android/content/Context.html#INPUT_METHOD_SERVICE)"]
            pub const INPUT_METHOD_SERVICE: &'static str = "input_method";
            #[doc = "public static final [INPUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#INPUT_SERVICE)"]
            pub const INPUT_SERVICE: &'static str = "input";
            #[doc = "public static final [IPSEC_SERVICE](https://developer.android.com/reference/android/content/Context.html#IPSEC_SERVICE)"]
            pub const IPSEC_SERVICE: &'static str = "ipsec";
            #[doc = "public static final [JOB_SCHEDULER_SERVICE](https://developer.android.com/reference/android/content/Context.html#JOB_SCHEDULER_SERVICE)"]
            pub const JOB_SCHEDULER_SERVICE: &'static str = "jobscheduler";
            #[doc = "public static final [KEYGUARD_SERVICE](https://developer.android.com/reference/android/content/Context.html#KEYGUARD_SERVICE)"]
            pub const KEYGUARD_SERVICE: &'static str = "keyguard";
            #[doc = "public static final [LAUNCHER_APPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#LAUNCHER_APPS_SERVICE)"]
            pub const LAUNCHER_APPS_SERVICE: &'static str = "launcherapps";
            #[doc = "public static final [LAYOUT_INFLATER_SERVICE](https://developer.android.com/reference/android/content/Context.html#LAYOUT_INFLATER_SERVICE)"]
            pub const LAYOUT_INFLATER_SERVICE: &'static str = "layout_inflater";
            #[doc = "public static final [LOCALE_SERVICE](https://developer.android.com/reference/android/content/Context.html#LOCALE_SERVICE)"]
            pub const LOCALE_SERVICE: &'static str = "locale";
            #[doc = "public static final [LOCATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#LOCATION_SERVICE)"]
            pub const LOCATION_SERVICE: &'static str = "location";
            #[doc = "public static final [MEDIA_COMMUNICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_COMMUNICATION_SERVICE)"]
            pub const MEDIA_COMMUNICATION_SERVICE: &'static str = "media_communication";
            #[doc = "public static final [MEDIA_METRICS_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_METRICS_SERVICE)"]
            pub const MEDIA_METRICS_SERVICE: &'static str = "media_metrics";
            #[doc = "public static final [MEDIA_PROJECTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_PROJECTION_SERVICE)"]
            pub const MEDIA_PROJECTION_SERVICE: &'static str = "media_projection";
            #[doc = "public static final [MEDIA_ROUTER_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_ROUTER_SERVICE)"]
            pub const MEDIA_ROUTER_SERVICE: &'static str = "media_router";
            #[doc = "public static final [MEDIA_SESSION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_SESSION_SERVICE)"]
            pub const MEDIA_SESSION_SERVICE: &'static str = "media_session";
            #[doc = "public static final [MIDI_SERVICE](https://developer.android.com/reference/android/content/Context.html#MIDI_SERVICE)"]
            pub const MIDI_SERVICE: &'static str = "midi";
            #[doc = "public static final [MODE_APPEND](https://developer.android.com/reference/android/content/Context.html#MODE_APPEND)"]
            pub const MODE_APPEND: i32 = 32768;
            #[doc = "public static final [MODE_ENABLE_WRITE_AHEAD_LOGGING](https://developer.android.com/reference/android/content/Context.html#MODE_ENABLE_WRITE_AHEAD_LOGGING)"]
            pub const MODE_ENABLE_WRITE_AHEAD_LOGGING: i32 = 8;
            #[doc = "public static final [MODE_MULTI_PROCESS](https://developer.android.com/reference/android/content/Context.html#MODE_MULTI_PROCESS)"]
            #[deprecated]
            pub const MODE_MULTI_PROCESS: i32 = 4;
            #[doc = "public static final [MODE_NO_LOCALIZED_COLLATORS](https://developer.android.com/reference/android/content/Context.html#MODE_NO_LOCALIZED_COLLATORS)"]
            pub const MODE_NO_LOCALIZED_COLLATORS: i32 = 16;
            #[doc = "public static final [MODE_PRIVATE](https://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE)"]
            pub const MODE_PRIVATE: i32 = 0;
            #[doc = "public static final [MODE_WORLD_READABLE](https://developer.android.com/reference/android/content/Context.html#MODE_WORLD_READABLE)"]
            #[deprecated]
            pub const MODE_WORLD_READABLE: i32 = 1;
            #[doc = "public static final [MODE_WORLD_WRITEABLE](https://developer.android.com/reference/android/content/Context.html#MODE_WORLD_WRITEABLE)"]
            #[deprecated]
            pub const MODE_WORLD_WRITEABLE: i32 = 2;
            #[doc = "public static final [NETWORK_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#NETWORK_STATS_SERVICE)"]
            pub const NETWORK_STATS_SERVICE: &'static str = "netstats";
            #[doc = "public static final [NFC_SERVICE](https://developer.android.com/reference/android/content/Context.html#NFC_SERVICE)"]
            pub const NFC_SERVICE: &'static str = "nfc";
            #[doc = "public static final [NOTIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#NOTIFICATION_SERVICE)"]
            pub const NOTIFICATION_SERVICE: &'static str = "notification";
            #[doc = "public static final [NSD_SERVICE](https://developer.android.com/reference/android/content/Context.html#NSD_SERVICE)"]
            pub const NSD_SERVICE: &'static str = "servicediscovery";
            #[doc = "public static final [PEOPLE_SERVICE](https://developer.android.com/reference/android/content/Context.html#PEOPLE_SERVICE)"]
            pub const PEOPLE_SERVICE: &'static str = "people";
            #[doc = "public static final [PERFORMANCE_HINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#PERFORMANCE_HINT_SERVICE)"]
            pub const PERFORMANCE_HINT_SERVICE: &'static str = "performance_hint";
            #[doc = "public static final [POWER_SERVICE](https://developer.android.com/reference/android/content/Context.html#POWER_SERVICE)"]
            pub const POWER_SERVICE: &'static str = "power";
            #[doc = "public static final [PRINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#PRINT_SERVICE)"]
            pub const PRINT_SERVICE: &'static str = "print";
            #[doc = "public static final [RECEIVER_EXPORTED](https://developer.android.com/reference/android/content/Context.html#RECEIVER_EXPORTED)"]
            pub const RECEIVER_EXPORTED: i32 = 2;
            #[doc = "public static final [RECEIVER_NOT_EXPORTED](https://developer.android.com/reference/android/content/Context.html#RECEIVER_NOT_EXPORTED)"]
            pub const RECEIVER_NOT_EXPORTED: i32 = 4;
            #[doc = "public static final [RECEIVER_VISIBLE_TO_INSTANT_APPS](https://developer.android.com/reference/android/content/Context.html#RECEIVER_VISIBLE_TO_INSTANT_APPS)"]
            pub const RECEIVER_VISIBLE_TO_INSTANT_APPS: i32 = 1;
            #[doc = "public static final [RESTRICTIONS_SERVICE](https://developer.android.com/reference/android/content/Context.html#RESTRICTIONS_SERVICE)"]
            pub const RESTRICTIONS_SERVICE: &'static str = "restrictions";
            #[doc = "public static final [ROLE_SERVICE](https://developer.android.com/reference/android/content/Context.html#ROLE_SERVICE)"]
            pub const ROLE_SERVICE: &'static str = "role";
            #[doc = "public static final [SEARCH_SERVICE](https://developer.android.com/reference/android/content/Context.html#SEARCH_SERVICE)"]
            pub const SEARCH_SERVICE: &'static str = "search";
            #[doc = "public static final [SENSOR_SERVICE](https://developer.android.com/reference/android/content/Context.html#SENSOR_SERVICE)"]
            pub const SENSOR_SERVICE: &'static str = "sensor";
            #[doc = "public static final [SHORTCUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#SHORTCUT_SERVICE)"]
            pub const SHORTCUT_SERVICE: &'static str = "shortcut";
            #[doc = "public static final [STATUS_BAR_SERVICE](https://developer.android.com/reference/android/content/Context.html#STATUS_BAR_SERVICE)"]
            pub const STATUS_BAR_SERVICE: &'static str = "statusbar";
            #[doc = "public static final [STORAGE_SERVICE](https://developer.android.com/reference/android/content/Context.html#STORAGE_SERVICE)"]
            pub const STORAGE_SERVICE: &'static str = "storage";
            #[doc = "public static final [STORAGE_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#STORAGE_STATS_SERVICE)"]
            pub const STORAGE_STATS_SERVICE: &'static str = "storagestats";
            #[doc = "public static final [SYSTEM_HEALTH_SERVICE](https://developer.android.com/reference/android/content/Context.html#SYSTEM_HEALTH_SERVICE)"]
            pub const SYSTEM_HEALTH_SERVICE: &'static str = "systemhealth";
            #[doc = "public static final [TELECOM_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELECOM_SERVICE)"]
            pub const TELECOM_SERVICE: &'static str = "telecom";
            #[doc = "public static final [TELEPHONY_IMS_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_IMS_SERVICE)"]
            pub const TELEPHONY_IMS_SERVICE: &'static str = "telephony_ims";
            #[doc = "public static final [TELEPHONY_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_SERVICE)"]
            pub const TELEPHONY_SERVICE: &'static str = "phone";
            #[doc = "public static final [TELEPHONY_SUBSCRIPTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_SUBSCRIPTION_SERVICE)"]
            pub const TELEPHONY_SUBSCRIPTION_SERVICE: &'static str = "telephony_subscription_service";
            #[doc = "public static final [TEXT_CLASSIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#TEXT_CLASSIFICATION_SERVICE)"]
            pub const TEXT_CLASSIFICATION_SERVICE: &'static str = "textclassification";
            #[doc = "public static final [TEXT_SERVICES_MANAGER_SERVICE](https://developer.android.com/reference/android/content/Context.html#TEXT_SERVICES_MANAGER_SERVICE)"]
            pub const TEXT_SERVICES_MANAGER_SERVICE: &'static str = "textservices";
            #[doc = "public static final [TV_INPUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#TV_INPUT_SERVICE)"]
            pub const TV_INPUT_SERVICE: &'static str = "tv_input";
            #[doc = "public static final [TV_INTERACTIVE_APP_SERVICE](https://developer.android.com/reference/android/content/Context.html#TV_INTERACTIVE_APP_SERVICE)"]
            pub const TV_INTERACTIVE_APP_SERVICE: &'static str = "tv_interactive_app";
            #[doc = "public static final [UI_MODE_SERVICE](https://developer.android.com/reference/android/content/Context.html#UI_MODE_SERVICE)"]
            pub const UI_MODE_SERVICE: &'static str = "uimode";
            #[doc = "public static final [USAGE_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#USAGE_STATS_SERVICE)"]
            pub const USAGE_STATS_SERVICE: &'static str = "usagestats";
            #[doc = "public static final [USB_SERVICE](https://developer.android.com/reference/android/content/Context.html#USB_SERVICE)"]
            pub const USB_SERVICE: &'static str = "usb";
            #[doc = "public static final [USER_SERVICE](https://developer.android.com/reference/android/content/Context.html#USER_SERVICE)"]
            pub const USER_SERVICE: &'static str = "user";
            #[doc = "public static final [VIBRATOR_MANAGER_SERVICE](https://developer.android.com/reference/android/content/Context.html#VIBRATOR_MANAGER_SERVICE)"]
            pub const VIBRATOR_MANAGER_SERVICE: &'static str = "vibrator_manager";
            #[doc = "public static final [VIBRATOR_SERVICE](https://developer.android.com/reference/android/content/Context.html#VIBRATOR_SERVICE)"]
            #[deprecated]
            pub const VIBRATOR_SERVICE: &'static str = "vibrator";
            #[doc = "public static final [VPN_MANAGEMENT_SERVICE](https://developer.android.com/reference/android/content/Context.html#VPN_MANAGEMENT_SERVICE)"]
            pub const VPN_MANAGEMENT_SERVICE: &'static str = "vpn_management";
            #[doc = "public static final [WALLPAPER_SERVICE](https://developer.android.com/reference/android/content/Context.html#WALLPAPER_SERVICE)"]
            pub const WALLPAPER_SERVICE: &'static str = "wallpaper";
            #[doc = "public static final [WIFI_AWARE_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_AWARE_SERVICE)"]
            pub const WIFI_AWARE_SERVICE: &'static str = "wifiaware";
            #[doc = "public static final [WIFI_P2P_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_P2P_SERVICE)"]
            pub const WIFI_P2P_SERVICE: &'static str = "wifip2p";
            #[doc = "public static final [WIFI_RTT_RANGING_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_RTT_RANGING_SERVICE)"]
            pub const WIFI_RTT_RANGING_SERVICE: &'static str = "wifirtt";
            #[doc = "public static final [WIFI_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_SERVICE)"]
            pub const WIFI_SERVICE: &'static str = "wifi";
            #[doc = "public static final [WINDOW_SERVICE](https://developer.android.com/reference/android/content/Context.html#WINDOW_SERVICE)"]
            pub const WINDOW_SERVICE: &'static str = "window";
        }
        #[doc = "pub class [ContextWrapper](https://developer.android.com/reference/android/content/ContextWrapper.html)"]
        pub enum ContextWrapper {}
        unsafe impl ::java_spaghetti::ReferenceType for ContextWrapper {}
        unsafe impl ::java_spaghetti::JniType for ContextWrapper {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/content/ContextWrapper")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Context> for ContextWrapper {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for ContextWrapper {}
        impl ContextWrapper {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/content/ContextWrapper"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[ContextWrapper](https://developer.android.com/reference/android/content/ContextWrapper.html#ContextWrapper(android.content.Context))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Landroid/content/Context;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBaseContext](https://developer.android.com/reference/android/content/ContextWrapper.html#getBaseContext())"]
            pub fn getBaseContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBaseContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getApplicationContext](https://developer.android.com/reference/android/content/ContextWrapper.html#getApplicationContext())"]
            pub fn getApplicationContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getApplicationContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTheme](https://developer.android.com/reference/android/content/ContextWrapper.html#setTheme(int))"]
            pub fn setTheme<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"setTheme", c"(I)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageName](https://developer.android.com/reference/android/content/ContextWrapper.html#getPackageName())"]
            pub fn getPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getOpPackageName](https://developer.android.com/reference/android/content/ContextWrapper.html#getOpPackageName())"]
            pub fn getOpPackageName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getOpPackageName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getAttributionTag](https://developer.android.com/reference/android/content/ContextWrapper.html#getAttributionTag())"]
            pub fn getAttributionTag<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getAttributionTag",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageResourcePath](https://developer.android.com/reference/android/content/ContextWrapper.html#getPackageResourcePath())"]
            pub fn getPackageResourcePath<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageResourcePath",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPackageCodePath](https://developer.android.com/reference/android/content/ContextWrapper.html#getPackageCodePath())"]
            pub fn getPackageCodePath<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getPackageCodePath",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveSharedPreferencesFrom](https://developer.android.com/reference/android/content/ContextWrapper.html#moveSharedPreferencesFrom(android.content.Context,%20java.lang.String))"]
            pub fn moveSharedPreferencesFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveSharedPreferencesFrom",
                                c"(Landroid/content/Context;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteSharedPreferences](https://developer.android.com/reference/android/content/ContextWrapper.html#deleteSharedPreferences(java.lang.String))"]
            pub fn deleteSharedPreferences<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteSharedPreferences",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteFile](https://developer.android.com/reference/android/content/ContextWrapper.html#deleteFile(java.lang.String))"]
            pub fn deleteFile<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteFile",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[fileList](https://developer.android.com/reference/android/content/ContextWrapper.html#fileList())"]
            pub fn fileList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::super::java::lang::String, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"fileList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[moveDatabaseFrom](https://developer.android.com/reference/android/content/ContextWrapper.html#moveDatabaseFrom(android.content.Context,%20java.lang.String))"]
            pub fn moveDatabaseFrom<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Context>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"moveDatabaseFrom",
                                c"(Landroid/content/Context;Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deleteDatabase](https://developer.android.com/reference/android/content/ContextWrapper.html#deleteDatabase(java.lang.String))"]
            pub fn deleteDatabase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deleteDatabase",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[databaseList](https://developer.android.com/reference/android/content/ContextWrapper.html#databaseList())"]
            pub fn databaseList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::super::java::lang::String, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"databaseList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWallpaperDesiredMinimumWidth](https://developer.android.com/reference/android/content/ContextWrapper.html#getWallpaperDesiredMinimumWidth())"]
            #[deprecated]
            pub fn getWallpaperDesiredMinimumWidth<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWallpaperDesiredMinimumWidth",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getWallpaperDesiredMinimumHeight](https://developer.android.com/reference/android/content/ContextWrapper.html#getWallpaperDesiredMinimumHeight())"]
            #[deprecated]
            pub fn getWallpaperDesiredMinimumHeight<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getWallpaperDesiredMinimumHeight",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clearWallpaper](https://developer.android.com/reference/android/content/ContextWrapper.html#clearWallpaper())"]
            #[deprecated]
            pub fn clearWallpaper<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clearWallpaper",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemService](https://developer.android.com/reference/android/content/ContextWrapper.html#getSystemService(java.lang.String))"]
            pub fn getSystemService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemService",
                                c"(Ljava/lang/String;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#checkPermission(java.lang.String,%20int,%20int))"]
            pub fn checkPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkPermission",
                                c"(Ljava/lang/String;II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingPermission(java.lang.String))"]
            pub fn checkCallingPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkCallingOrSelfPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingOrSelfPermission(java.lang.String))"]
            pub fn checkCallingOrSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkCallingOrSelfPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[checkSelfPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#checkSelfPermission(java.lang.String))"]
            pub fn checkSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"checkSelfPermission",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforcePermission](https://developer.android.com/reference/android/content/ContextWrapper.html#enforcePermission(java.lang.String,%20int,%20int,%20java.lang.String))"]
            pub fn enforcePermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforcePermission",
                                c"(Ljava/lang/String;IILjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforceCallingPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#enforceCallingPermission(java.lang.String,%20java.lang.String))"]
            pub fn enforceCallingPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforceCallingPermission",
                                c"(Ljava/lang/String;Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enforceCallingOrSelfPermission](https://developer.android.com/reference/android/content/ContextWrapper.html#enforceCallingOrSelfPermission(java.lang.String,%20java.lang.String))"]
            pub fn enforceCallingOrSelfPermission<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enforceCallingOrSelfPermission",
                                c"(Ljava/lang/String;Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createPackageContext](https://developer.android.com/reference/android/content/ContextWrapper.html#createPackageContext(java.lang.String,%20int))"]
            pub fn createPackageContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createPackageContext",
                                c"(Ljava/lang/String;I)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createContextForSplit](https://developer.android.com/reference/android/content/ContextWrapper.html#createContextForSplit(java.lang.String))"]
            pub fn createContextForSplit<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createContextForSplit",
                                c"(Ljava/lang/String;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createWindowContext](https://developer.android.com/reference/android/content/ContextWrapper.html#createWindowContext(int,%20android.os.Bundle))"]
            pub fn createWindowContext_int_Bundle<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<super::os::Bundle>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createWindowContext",
                                c"(ILandroid/os/Bundle;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createAttributionContext](https://developer.android.com/reference/android/content/ContextWrapper.html#createAttributionContext(java.lang.String))"]
            pub fn createAttributionContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createAttributionContext",
                                c"(Ljava/lang/String;)Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isRestricted](https://developer.android.com/reference/android/content/ContextWrapper.html#isRestricted())"]
            pub fn isRestricted<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isRestricted",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createDeviceProtectedStorageContext](https://developer.android.com/reference/android/content/ContextWrapper.html#createDeviceProtectedStorageContext())"]
            pub fn createDeviceProtectedStorageContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Context>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createDeviceProtectedStorageContext",
                                c"()Landroid/content/Context;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isDeviceProtectedStorage](https://developer.android.com/reference/android/content/ContextWrapper.html#isDeviceProtectedStorage())"]
            pub fn isDeviceProtectedStorage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isDeviceProtectedStorage",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isUiContext](https://developer.android.com/reference/android/content/ContextWrapper.html#isUiContext())"]
            pub fn isUiContext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isUiContext", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod nfc {

        pub mod cardemulation {
            #[doc = "pub final class [CardEmulation](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html)"]
            pub enum CardEmulation {}
            unsafe impl ::java_spaghetti::ReferenceType for CardEmulation {}
            unsafe impl ::java_spaghetti::JniType for CardEmulation {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/cardemulation/CardEmulation")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for CardEmulation {}
            impl CardEmulation {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/cardemulation/CardEmulation"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[getInstance](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getInstance(android.nfc.NfcAdapter))"]
                pub fn getInstance<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::NfcAdapter>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, CardEmulation>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"getInstance",
                                    c"(Landroid/nfc/NfcAdapter;)Landroid/nfc/cardemulation/CardEmulation;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[categoryAllowsForegroundPreference](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#categoryAllowsForegroundPreference(java.lang.String))"]
                pub fn categoryAllowsForegroundPreference<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::String>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"categoryAllowsForegroundPreference",
                                    c"(Ljava/lang/String;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getSelectionModeForCategory](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getSelectionModeForCategory(java.lang.String))"]
                pub fn getSelectionModeForCategory<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::super::java::lang::String>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getSelectionModeForCategory",
                                    c"(Ljava/lang/String;)I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[unsetPreferredService](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#unsetPreferredService(android.app.Activity))"]
                pub fn unsetPreferredService<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::app::Activity>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"unsetPreferredService",
                                    c"(Landroid/app/Activity;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[supportsAidPrefixRegistration](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#supportsAidPrefixRegistration())"]
                pub fn supportsAidPrefixRegistration<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"supportsAidPrefixRegistration",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getRouteDestinationForPreferredPaymentService](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getRouteDestinationForPreferredPaymentService())"]
                pub fn getRouteDestinationForPreferredPaymentService<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getRouteDestinationForPreferredPaymentService",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [ACTION_CHANGE_DEFAULT](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#ACTION_CHANGE_DEFAULT)"]
                pub const ACTION_CHANGE_DEFAULT: &'static str = "android.nfc.cardemulation.action.ACTION_CHANGE_DEFAULT";
                #[doc = "public static final [CATEGORY_OTHER](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_OTHER)"]
                pub const CATEGORY_OTHER: &'static str = "other";
                #[doc = "public static final [CATEGORY_PAYMENT](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_PAYMENT)"]
                pub const CATEGORY_PAYMENT: &'static str = "payment";
                #[doc = "public static final [EXTRA_CATEGORY](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#EXTRA_CATEGORY)"]
                pub const EXTRA_CATEGORY: &'static str = "category";
                #[doc = "public static final [EXTRA_SERVICE_COMPONENT](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#EXTRA_SERVICE_COMPONENT)"]
                pub const EXTRA_SERVICE_COMPONENT: &'static str = "component";
                #[doc = "public static final [SELECTION_MODE_ALWAYS_ASK](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#SELECTION_MODE_ALWAYS_ASK)"]
                pub const SELECTION_MODE_ALWAYS_ASK: i32 = 1;
                #[doc = "public static final [SELECTION_MODE_ASK_IF_CONFLICT](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#SELECTION_MODE_ASK_IF_CONFLICT)"]
                pub const SELECTION_MODE_ASK_IF_CONFLICT: i32 = 2;
                #[doc = "public static final [SELECTION_MODE_PREFER_DEFAULT](https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#SELECTION_MODE_PREFER_DEFAULT)"]
                pub const SELECTION_MODE_PREFER_DEFAULT: i32 = 0;
            }
            #[doc = "pub class [HostApduService](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html)"]
            pub enum HostApduService {}
            unsafe impl ::java_spaghetti::ReferenceType for HostApduService {}
            unsafe impl ::java_spaghetti::JniType for HostApduService {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/cardemulation/HostApduService")
                }
            }
            impl HostApduService {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/cardemulation/HostApduService"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[HostApduService](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#HostApduService())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[sendResponseApdu](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#sendResponseApdu(byte[]))"]
                pub fn sendResponseApdu<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"sendResponseApdu",
                                    c"([B)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[notifyUnhandled](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#notifyUnhandled())"]
                pub fn notifyUnhandled<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"notifyUnhandled",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[processCommandApdu](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#processCommandApdu(byte[],%20android.os.Bundle))"]
                pub fn processCommandApdu<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                    arg1: impl ::java_spaghetti::AsArg<super::super::os::Bundle>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"processCommandApdu",
                                    c"([BLandroid/os/Bundle;)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onDeactivated](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#onDeactivated(int))"]
                pub fn onDeactivated<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onDeactivated",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [DEACTIVATION_DESELECTED](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#DEACTIVATION_DESELECTED)"]
                pub const DEACTIVATION_DESELECTED: i32 = 1;
                #[doc = "public static final [DEACTIVATION_LINK_LOSS](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#DEACTIVATION_LINK_LOSS)"]
                pub const DEACTIVATION_LINK_LOSS: i32 = 0;
                #[doc = "public static final [SERVICE_INTERFACE](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#SERVICE_INTERFACE)"]
                pub const SERVICE_INTERFACE: &'static str = "android.nfc.cardemulation.action.HOST_APDU_SERVICE";
                #[doc = "public static final [SERVICE_META_DATA](https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#SERVICE_META_DATA)"]
                pub const SERVICE_META_DATA: &'static str = "android.nfc.cardemulation.host_apdu_service";
            }
            #[doc = "pub class [HostNfcFService](https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html)"]
            pub enum HostNfcFService {}
            unsafe impl ::java_spaghetti::ReferenceType for HostNfcFService {}
            unsafe impl ::java_spaghetti::JniType for HostNfcFService {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/cardemulation/HostNfcFService")
                }
            }
            impl HostNfcFService {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/cardemulation/HostNfcFService"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[HostNfcFService](https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html#HostNfcFService())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[sendResponsePacket](https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html#sendResponsePacket(byte[]))"]
                pub fn sendResponsePacket<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"sendResponsePacket",
                                    c"([B)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[processNfcFPacket](https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html#processNfcFPacket(byte[],%20android.os.Bundle))"]
                pub fn processNfcFPacket<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                    arg1: impl ::java_spaghetti::AsArg<super::super::os::Bundle>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"processNfcFPacket",
                                    c"([BLandroid/os/Bundle;)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[onDeactivated](https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html#onDeactivated(int))"]
                pub fn onDeactivated<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onDeactivated",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [DEACTIVATION_LINK_LOSS](https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html#DEACTIVATION_LINK_LOSS)"]
                pub const DEACTIVATION_LINK_LOSS: i32 = 0;
                #[doc = "public static final [SERVICE_INTERFACE](https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html#SERVICE_INTERFACE)"]
                pub const SERVICE_INTERFACE: &'static str = "android.nfc.cardemulation.action.HOST_NFCF_SERVICE";
                #[doc = "public static final [SERVICE_META_DATA](https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html#SERVICE_META_DATA)"]
                pub const SERVICE_META_DATA: &'static str = "android.nfc.cardemulation.host_nfcf_service";
            }
            #[doc = "pub final class [NfcFCardEmulation](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html)"]
            pub enum NfcFCardEmulation {}
            unsafe impl ::java_spaghetti::ReferenceType for NfcFCardEmulation {}
            unsafe impl ::java_spaghetti::JniType for NfcFCardEmulation {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/cardemulation/NfcFCardEmulation")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for NfcFCardEmulation {}
            impl NfcFCardEmulation {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/cardemulation/NfcFCardEmulation"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[getInstance](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#getInstance(android.nfc.NfcAdapter))"]
                pub fn getInstance<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::NfcAdapter>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, NfcFCardEmulation>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"getInstance",
                                    c"(Landroid/nfc/NfcAdapter;)Landroid/nfc/cardemulation/NfcFCardEmulation;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[disableService](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#disableService(android.app.Activity))"]
                pub fn disableService<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::super::app::Activity>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"disableService",
                                    c"(Landroid/app/Activity;)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "pub class [OffHostApduService](https://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html)"]
            pub enum OffHostApduService {}
            unsafe impl ::java_spaghetti::ReferenceType for OffHostApduService {}
            unsafe impl ::java_spaghetti::JniType for OffHostApduService {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/cardemulation/OffHostApduService")
                }
            }
            impl OffHostApduService {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/cardemulation/OffHostApduService"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[OffHostApduService](https://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html#OffHostApduService())"]
                pub fn new<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::java_spaghetti::Local<'env, Self>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                            })
                            .as_raw();
                        __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [SERVICE_INTERFACE](https://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html#SERVICE_INTERFACE)"]
                pub const SERVICE_INTERFACE: &'static str = "android.nfc.cardemulation.action.OFF_HOST_APDU_SERVICE";
                #[doc = "public static final [SERVICE_META_DATA](https://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html#SERVICE_META_DATA)"]
                pub const SERVICE_META_DATA: &'static str = "android.nfc.cardemulation.off_host_apdu_service";
            }
        }

        pub mod tech {
            #[doc = "pub final class [IsoDep](https://developer.android.com/reference/android/nfc/tech/IsoDep.html)"]
            pub enum IsoDep {}
            unsafe impl ::java_spaghetti::ReferenceType for IsoDep {}
            unsafe impl ::java_spaghetti::JniType for IsoDep {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/IsoDep")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for IsoDep {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for IsoDep {}
            impl IsoDep {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/tech/IsoDep"))
                                .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, IsoDep>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/IsoDep;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setTimeout](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#setTimeout(int))"]
                pub fn setTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setTimeout",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTimeout](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#getTimeout())"]
                pub fn getTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTimeout",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getHistoricalBytes](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#getHistoricalBytes())"]
                pub fn getHistoricalBytes<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getHistoricalBytes",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getHiLayerResponse](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#getHiLayerResponse())"]
                pub fn getHiLayerResponse<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getHiLayerResponse",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[transceive](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#transceive(byte[]))"]
                pub fn transceive<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"transceive",
                                    c"([B)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getMaxTransceiveLength](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#getMaxTransceiveLength())"]
                pub fn getMaxTransceiveLength<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMaxTransceiveLength",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isExtendedLengthApduSupported](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#isExtendedLengthApduSupported())"]
                pub fn isExtendedLengthApduSupported<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isExtendedLengthApduSupported",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/IsoDep.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "pub final class [MifareClassic](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html)"]
            pub enum MifareClassic {}
            unsafe impl ::java_spaghetti::ReferenceType for MifareClassic {}
            unsafe impl ::java_spaghetti::JniType for MifareClassic {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/MifareClassic")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for MifareClassic {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for MifareClassic {}
            impl MifareClassic {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/tech/MifareClassic"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, MifareClassic>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/MifareClassic;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getType](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#getType())"]
                pub fn getType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getType", c"()I"))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getSize](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#getSize())"]
                pub fn getSize<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getSize", c"()I"))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getSectorCount](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#getSectorCount())"]
                pub fn getSectorCount<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getSectorCount",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getBlockCount](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#getBlockCount())"]
                pub fn getBlockCount<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getBlockCount",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getBlockCountInSector](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#getBlockCountInSector(int))"]
                pub fn getBlockCountInSector<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getBlockCountInSector",
                                    c"(I)I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[blockToSector](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#blockToSector(int))"]
                pub fn blockToSector<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"blockToSector",
                                    c"(I)I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[sectorToBlock](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#sectorToBlock(int))"]
                pub fn sectorToBlock<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"sectorToBlock",
                                    c"(I)I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[authenticateSectorWithKeyA](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#authenticateSectorWithKeyA(int,%20byte[]))"]
                pub fn authenticateSectorWithKeyA<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"authenticateSectorWithKeyA",
                                    c"(I[B)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[authenticateSectorWithKeyB](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#authenticateSectorWithKeyB(int,%20byte[]))"]
                pub fn authenticateSectorWithKeyB<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"authenticateSectorWithKeyB",
                                    c"(I[B)Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[readBlock](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#readBlock(int))"]
                pub fn readBlock<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"readBlock",
                                    c"(I)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[writeBlock](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#writeBlock(int,%20byte[]))"]
                pub fn writeBlock<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"writeBlock",
                                    c"(I[B)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[increment](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#increment(int,%20int))"]
                pub fn increment<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"increment",
                                    c"(II)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[decrement](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#decrement(int,%20int))"]
                pub fn decrement<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"decrement",
                                    c"(II)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[transfer](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#transfer(int))"]
                pub fn transfer<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"transfer",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[restore](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#restore(int))"]
                pub fn restore<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"restore",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[transceive](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#transceive(byte[]))"]
                pub fn transceive<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"transceive",
                                    c"([B)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getMaxTransceiveLength](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#getMaxTransceiveLength())"]
                pub fn getMaxTransceiveLength<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMaxTransceiveLength",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setTimeout](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#setTimeout(int))"]
                pub fn setTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setTimeout",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTimeout](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#getTimeout())"]
                pub fn getTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTimeout",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [BLOCK_SIZE](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#BLOCK_SIZE)"]
                pub const BLOCK_SIZE: i32 = 16;
                #[doc = "**get** public static final [KEY_DEFAULT](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_DEFAULT)"]
                pub fn KEY_DEFAULT<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                    static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    unsafe {
                        let __jni_field = __FIELD
                            .get_or_init(|| {
                                ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                    __jni_class,
                                    c"KEY_DEFAULT",
                                    c"[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.get_static_object_field(__jni_class, __jni_field)
                    }
                }
                #[doc = "**get** public static final [KEY_MIFARE_APPLICATION_DIRECTORY](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_MIFARE_APPLICATION_DIRECTORY)"]
                pub fn KEY_MIFARE_APPLICATION_DIRECTORY<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                    static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    unsafe {
                        let __jni_field = __FIELD
                            .get_or_init(|| {
                                ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                    __jni_class,
                                    c"KEY_MIFARE_APPLICATION_DIRECTORY",
                                    c"[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.get_static_object_field(__jni_class, __jni_field)
                    }
                }
                #[doc = "**get** public static final [KEY_NFC_FORUM](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_NFC_FORUM)"]
                pub fn KEY_NFC_FORUM<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                    static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    unsafe {
                        let __jni_field = __FIELD
                            .get_or_init(|| {
                                ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                    __jni_class,
                                    c"KEY_NFC_FORUM",
                                    c"[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.get_static_object_field(__jni_class, __jni_field)
                    }
                }
                #[doc = "public static final [SIZE_1K](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#SIZE_1K)"]
                pub const SIZE_1K: i32 = 1024;
                #[doc = "public static final [SIZE_2K](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#SIZE_2K)"]
                pub const SIZE_2K: i32 = 2048;
                #[doc = "public static final [SIZE_4K](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#SIZE_4K)"]
                pub const SIZE_4K: i32 = 4096;
                #[doc = "public static final [SIZE_MINI](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#SIZE_MINI)"]
                pub const SIZE_MINI: i32 = 320;
                #[doc = "public static final [TYPE_CLASSIC](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#TYPE_CLASSIC)"]
                pub const TYPE_CLASSIC: i32 = 0;
                #[doc = "public static final [TYPE_PLUS](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#TYPE_PLUS)"]
                pub const TYPE_PLUS: i32 = 1;
                #[doc = "public static final [TYPE_PRO](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#TYPE_PRO)"]
                pub const TYPE_PRO: i32 = 2;
                #[doc = "public static final [TYPE_UNKNOWN](https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#TYPE_UNKNOWN)"]
                pub const TYPE_UNKNOWN: i32 = -1;
            }
            #[doc = "pub final class [MifareUltralight](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html)"]
            pub enum MifareUltralight {}
            unsafe impl ::java_spaghetti::ReferenceType for MifareUltralight {}
            unsafe impl ::java_spaghetti::JniType for MifareUltralight {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/MifareUltralight")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for MifareUltralight {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for MifareUltralight {}
            impl MifareUltralight {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/tech/MifareUltralight"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, MifareUltralight>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/MifareUltralight;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getType](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#getType())"]
                pub fn getType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getType", c"()I"))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[readPages](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#readPages(int))"]
                pub fn readPages<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"readPages",
                                    c"(I)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[writePage](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#writePage(int,%20byte[]))"]
                pub fn writePage<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                    arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [
                            ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                            ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"writePage",
                                    c"(I[B)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[transceive](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#transceive(byte[]))"]
                pub fn transceive<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"transceive",
                                    c"([B)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getMaxTransceiveLength](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#getMaxTransceiveLength())"]
                pub fn getMaxTransceiveLength<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMaxTransceiveLength",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setTimeout](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#setTimeout(int))"]
                pub fn setTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setTimeout",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTimeout](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#getTimeout())"]
                pub fn getTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTimeout",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [PAGE_SIZE](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#PAGE_SIZE)"]
                pub const PAGE_SIZE: i32 = 4;
                #[doc = "public static final [TYPE_ULTRALIGHT](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#TYPE_ULTRALIGHT)"]
                pub const TYPE_ULTRALIGHT: i32 = 1;
                #[doc = "public static final [TYPE_ULTRALIGHT_C](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#TYPE_ULTRALIGHT_C)"]
                pub const TYPE_ULTRALIGHT_C: i32 = 2;
                #[doc = "public static final [TYPE_UNKNOWN](https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#TYPE_UNKNOWN)"]
                pub const TYPE_UNKNOWN: i32 = -1;
            }
            #[doc = "pub final class [Ndef](https://developer.android.com/reference/android/nfc/tech/Ndef.html)"]
            pub enum Ndef {}
            unsafe impl ::java_spaghetti::ReferenceType for Ndef {}
            unsafe impl ::java_spaghetti::JniType for Ndef {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/Ndef")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for Ndef {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for Ndef {}
            impl Ndef {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/tech/Ndef"))
                                .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/Ndef.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, Ndef>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/Ndef;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getCachedNdefMessage](https://developer.android.com/reference/android/nfc/tech/Ndef.html#getCachedNdefMessage())"]
                pub fn getCachedNdefMessage<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::NdefMessage>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getCachedNdefMessage",
                                    c"()Landroid/nfc/NdefMessage;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getType](https://developer.android.com/reference/android/nfc/tech/Ndef.html#getType())"]
                pub fn getType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::super::super::java::lang::String>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getType",
                                    c"()Ljava/lang/String;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getMaxSize](https://developer.android.com/reference/android/nfc/tech/Ndef.html#getMaxSize())"]
                pub fn getMaxSize<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMaxSize",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isWritable](https://developer.android.com/reference/android/nfc/tech/Ndef.html#isWritable())"]
                pub fn isWritable<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isWritable",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getNdefMessage](https://developer.android.com/reference/android/nfc/tech/Ndef.html#getNdefMessage())"]
                pub fn getNdefMessage<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::NdefMessage>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getNdefMessage",
                                    c"()Landroid/nfc/NdefMessage;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[writeNdefMessage](https://developer.android.com/reference/android/nfc/tech/Ndef.html#writeNdefMessage(android.nfc.NdefMessage))"]
                pub fn writeNdefMessage<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::NdefMessage>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"writeNdefMessage",
                                    c"(Landroid/nfc/NdefMessage;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[canMakeReadOnly](https://developer.android.com/reference/android/nfc/tech/Ndef.html#canMakeReadOnly())"]
                pub fn canMakeReadOnly<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"canMakeReadOnly",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[makeReadOnly](https://developer.android.com/reference/android/nfc/tech/Ndef.html#makeReadOnly())"]
                pub fn makeReadOnly<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"makeReadOnly",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/Ndef.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/Ndef.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/Ndef.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/Ndef.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [MIFARE_CLASSIC](https://developer.android.com/reference/android/nfc/tech/Ndef.html#MIFARE_CLASSIC)"]
                pub const MIFARE_CLASSIC: &'static str = "com.nxp.ndef.mifareclassic";
                #[doc = "public static final [NFC_FORUM_TYPE_1](https://developer.android.com/reference/android/nfc/tech/Ndef.html#NFC_FORUM_TYPE_1)"]
                pub const NFC_FORUM_TYPE_1: &'static str = "org.nfcforum.ndef.type1";
                #[doc = "public static final [NFC_FORUM_TYPE_2](https://developer.android.com/reference/android/nfc/tech/Ndef.html#NFC_FORUM_TYPE_2)"]
                pub const NFC_FORUM_TYPE_2: &'static str = "org.nfcforum.ndef.type2";
                #[doc = "public static final [NFC_FORUM_TYPE_3](https://developer.android.com/reference/android/nfc/tech/Ndef.html#NFC_FORUM_TYPE_3)"]
                pub const NFC_FORUM_TYPE_3: &'static str = "org.nfcforum.ndef.type3";
                #[doc = "public static final [NFC_FORUM_TYPE_4](https://developer.android.com/reference/android/nfc/tech/Ndef.html#NFC_FORUM_TYPE_4)"]
                pub const NFC_FORUM_TYPE_4: &'static str = "org.nfcforum.ndef.type4";
            }
            #[doc = "pub final class [NdefFormatable](https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html)"]
            pub enum NdefFormatable {}
            unsafe impl ::java_spaghetti::ReferenceType for NdefFormatable {}
            unsafe impl ::java_spaghetti::JniType for NdefFormatable {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/NdefFormatable")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for NdefFormatable {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for NdefFormatable {}
            impl NdefFormatable {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/tech/NdefFormatable"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, NdefFormatable>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/NdefFormatable;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[format](https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html#format(android.nfc.NdefMessage))"]
                pub fn format<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::NdefMessage>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"format",
                                    c"(Landroid/nfc/NdefMessage;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[formatReadOnly](https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html#formatReadOnly(android.nfc.NdefMessage))"]
                pub fn formatReadOnly<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<super::NdefMessage>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"formatReadOnly",
                                    c"(Landroid/nfc/NdefMessage;)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "pub final class [NfcA](https://developer.android.com/reference/android/nfc/tech/NfcA.html)"]
            pub enum NfcA {}
            unsafe impl ::java_spaghetti::ReferenceType for NfcA {}
            unsafe impl ::java_spaghetti::JniType for NfcA {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/NfcA")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for NfcA {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for NfcA {}
            impl NfcA {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/tech/NfcA"))
                                .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/NfcA.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, NfcA>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/NfcA;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getAtqa](https://developer.android.com/reference/android/nfc/tech/NfcA.html#getAtqa())"]
                pub fn getAtqa<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getAtqa",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getSak](https://developer.android.com/reference/android/nfc/tech/NfcA.html#getSak())"]
                pub fn getSak<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i16, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getSak", c"()S"))
                            })
                            .as_raw();
                        __jni_env.call_short_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[transceive](https://developer.android.com/reference/android/nfc/tech/NfcA.html#transceive(byte[]))"]
                pub fn transceive<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"transceive",
                                    c"([B)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getMaxTransceiveLength](https://developer.android.com/reference/android/nfc/tech/NfcA.html#getMaxTransceiveLength())"]
                pub fn getMaxTransceiveLength<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMaxTransceiveLength",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setTimeout](https://developer.android.com/reference/android/nfc/tech/NfcA.html#setTimeout(int))"]
                pub fn setTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setTimeout",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTimeout](https://developer.android.com/reference/android/nfc/tech/NfcA.html#getTimeout())"]
                pub fn getTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTimeout",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/NfcA.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/NfcA.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/NfcA.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/NfcA.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "pub final class [NfcB](https://developer.android.com/reference/android/nfc/tech/NfcB.html)"]
            pub enum NfcB {}
            unsafe impl ::java_spaghetti::ReferenceType for NfcB {}
            unsafe impl ::java_spaghetti::JniType for NfcB {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/NfcB")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for NfcB {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for NfcB {}
            impl NfcB {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/tech/NfcB"))
                                .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/NfcB.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, NfcB>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/NfcB;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getApplicationData](https://developer.android.com/reference/android/nfc/tech/NfcB.html#getApplicationData())"]
                pub fn getApplicationData<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getApplicationData",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getProtocolInfo](https://developer.android.com/reference/android/nfc/tech/NfcB.html#getProtocolInfo())"]
                pub fn getProtocolInfo<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getProtocolInfo",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[transceive](https://developer.android.com/reference/android/nfc/tech/NfcB.html#transceive(byte[]))"]
                pub fn transceive<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"transceive",
                                    c"([B)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getMaxTransceiveLength](https://developer.android.com/reference/android/nfc/tech/NfcB.html#getMaxTransceiveLength())"]
                pub fn getMaxTransceiveLength<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMaxTransceiveLength",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/NfcB.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/NfcB.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/NfcB.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/NfcB.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "pub final class [NfcBarcode](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html)"]
            pub enum NfcBarcode {}
            unsafe impl ::java_spaghetti::ReferenceType for NfcBarcode {}
            unsafe impl ::java_spaghetti::JniType for NfcBarcode {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/NfcBarcode")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for NfcBarcode {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for NfcBarcode {}
            impl NfcBarcode {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/tech/NfcBarcode"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, NfcBarcode>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/NfcBarcode;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getType](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#getType())"]
                pub fn getType<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getType", c"()I"))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getBarcode](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#getBarcode())"]
                pub fn getBarcode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getBarcode",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "public static final [TYPE_KOVIO](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#TYPE_KOVIO)"]
                pub const TYPE_KOVIO: i32 = 1;
                #[doc = "public static final [TYPE_UNKNOWN](https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#TYPE_UNKNOWN)"]
                pub const TYPE_UNKNOWN: i32 = -1;
            }
            #[doc = "pub final class [NfcF](https://developer.android.com/reference/android/nfc/tech/NfcF.html)"]
            pub enum NfcF {}
            unsafe impl ::java_spaghetti::ReferenceType for NfcF {}
            unsafe impl ::java_spaghetti::JniType for NfcF {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/NfcF")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for NfcF {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for NfcF {}
            impl NfcF {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/tech/NfcF"))
                                .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/NfcF.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, NfcF>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/NfcF;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getSystemCode](https://developer.android.com/reference/android/nfc/tech/NfcF.html#getSystemCode())"]
                pub fn getSystemCode<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getSystemCode",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getManufacturer](https://developer.android.com/reference/android/nfc/tech/NfcF.html#getManufacturer())"]
                pub fn getManufacturer<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getManufacturer",
                                    c"()[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[transceive](https://developer.android.com/reference/android/nfc/tech/NfcF.html#transceive(byte[]))"]
                pub fn transceive<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"transceive",
                                    c"([B)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getMaxTransceiveLength](https://developer.android.com/reference/android/nfc/tech/NfcF.html#getMaxTransceiveLength())"]
                pub fn getMaxTransceiveLength<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMaxTransceiveLength",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[setTimeout](https://developer.android.com/reference/android/nfc/tech/NfcF.html#setTimeout(int))"]
                pub fn setTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: i32,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"setTimeout",
                                    c"(I)V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTimeout](https://developer.android.com/reference/android/nfc/tech/NfcF.html#getTimeout())"]
                pub fn getTimeout<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTimeout",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/NfcF.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/NfcF.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/NfcF.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/NfcF.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "pub final class [NfcV](https://developer.android.com/reference/android/nfc/tech/NfcV.html)"]
            pub enum NfcV {}
            unsafe impl ::java_spaghetti::ReferenceType for NfcV {}
            unsafe impl ::java_spaghetti::JniType for NfcV {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/NfcV")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<TagTechnology> for NfcV {}
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for NfcV {}
            impl NfcV {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/tech/NfcV"))
                                .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[get](https://developer.android.com/reference/android/nfc/tech/NfcV.html#get(android.nfc.Tag))"]
                pub fn get<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                    arg0: impl ::java_spaghetti::AsArg<super::Tag>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, NfcV>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"get",
                                    c"(Landroid/nfc/Tag;)Landroid/nfc/tech/NfcV;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getResponseFlags](https://developer.android.com/reference/android/nfc/tech/NfcV.html#getResponseFlags())"]
                pub fn getResponseFlags<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i8, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getResponseFlags",
                                    c"()B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_byte_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getDsfId](https://developer.android.com/reference/android/nfc/tech/NfcV.html#getDsfId())"]
                pub fn getDsfId<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i8, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getDsfId",
                                    c"()B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_byte_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[transceive](https://developer.android.com/reference/android/nfc/tech/NfcV.html#transceive(byte[]))"]
                pub fn transceive<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                    arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"transceive",
                                    c"([B)[B",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getMaxTransceiveLength](https://developer.android.com/reference/android/nfc/tech/NfcV.html#getMaxTransceiveLength())"]
                pub fn getMaxTransceiveLength<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getMaxTransceiveLength",
                                    c"()I",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/NfcV.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/NfcV.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/NfcV.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/NfcV.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "pub interface [TagTechnology](https://developer.android.com/reference/android/nfc/tech/TagTechnology.html)"]
            pub enum TagTechnology {}
            unsafe impl ::java_spaghetti::ReferenceType for TagTechnology {}
            unsafe impl ::java_spaghetti::JniType for TagTechnology {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"android/nfc/tech/TagTechnology")
                }
            }
            unsafe impl ::java_spaghetti::AssignableTo<super::super::super::java::lang::Object> for TagTechnology {}
            impl TagTechnology {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::super::java::lang::Object>> =
                        ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"android/nfc/tech/TagTechnology"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[getTag](https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#getTag())"]
                pub fn getTag<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, super::Tag>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"getTag",
                                    c"()Landroid/nfc/Tag;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[connect](https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#connect())"]
                pub fn connect<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"connect", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[close](https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#close())"]
                pub fn close<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"close", c"()V"))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "[isConnected](https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#isConnected())"]
                pub fn isConnected<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"isConnected",
                                    c"()Z",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
        }
        #[doc = "pub class [FormatException](https://developer.android.com/reference/android/nfc/FormatException.html)"]
        pub enum FormatException {}
        unsafe impl ::java_spaghetti::ReferenceType for FormatException {}
        unsafe impl ::java_spaghetti::JniType for FormatException {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/FormatException")
            }
        }
        impl FormatException {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/FormatException"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[FormatException](https://developer.android.com/reference/android/nfc/FormatException.html#FormatException())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[FormatException](https://developer.android.com/reference/android/nfc/FormatException.html#FormatException(java.lang.String))"]
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[FormatException](https://developer.android.com/reference/android/nfc/FormatException.html#FormatException(java.lang.String,%20java.lang.Throwable))"]
            pub fn new_String_Throwable<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::Throwable>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;Ljava/lang/Throwable;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub final class [NdefMessage](https://developer.android.com/reference/android/nfc/NdefMessage.html)"]
        pub enum NdefMessage {}
        unsafe impl ::java_spaghetti::ReferenceType for NdefMessage {}
        unsafe impl ::java_spaghetti::JniType for NdefMessage {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NdefMessage")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NdefMessage {}
        impl NdefMessage {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/NdefMessage"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[NdefMessage](https://developer.android.com/reference/android/nfc/NdefMessage.html#NdefMessage(byte[]))"]
            pub fn new_byte_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([B)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[NdefMessage](https://developer.android.com/reference/android/nfc/NdefMessage.html#NdefMessage(android.nfc.NdefRecord,%20android.nfc.NdefRecord...))"]
            pub fn new_NdefRecord_NdefRecord_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<NdefRecord>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<NdefRecord, super::super::java::lang::Throwable>>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Landroid/nfc/NdefRecord;[Landroid/nfc/NdefRecord;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[NdefMessage](https://developer.android.com/reference/android/nfc/NdefMessage.html#NdefMessage(android.nfc.NdefRecord[]))"]
            pub fn new_NdefRecord_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<NdefRecord, super::super::java::lang::Throwable>>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([Landroid/nfc/NdefRecord;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getRecords](https://developer.android.com/reference/android/nfc/NdefMessage.html#getRecords())"]
            pub fn getRecords<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<NdefRecord, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getRecords",
                                c"()[Landroid/nfc/NdefRecord;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getByteArrayLength](https://developer.android.com/reference/android/nfc/NdefMessage.html#getByteArrayLength())"]
            pub fn getByteArrayLength<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getByteArrayLength",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toByteArray](https://developer.android.com/reference/android/nfc/NdefMessage.html#toByteArray())"]
            pub fn toByteArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toByteArray",
                                c"()[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/nfc/NdefMessage.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/nfc/NdefMessage.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"hashCode", c"()I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/android/nfc/NdefMessage.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/nfc/NdefMessage.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub final class [NdefRecord](https://developer.android.com/reference/android/nfc/NdefRecord.html)"]
        pub enum NdefRecord {}
        unsafe impl ::java_spaghetti::ReferenceType for NdefRecord {}
        unsafe impl ::java_spaghetti::JniType for NdefRecord {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NdefRecord")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NdefRecord {}
        impl NdefRecord {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/NdefRecord"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[NdefRecord](https://developer.android.com/reference/android/nfc/NdefRecord.html#NdefRecord(short,%20byte[],%20byte[],%20byte[]))"]
            pub fn new_short_byte_array_byte_array_byte_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i16,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg3: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(S[B[B[B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[NdefRecord](https://developer.android.com/reference/android/nfc/NdefRecord.html#NdefRecord(byte[]))"]
            #[deprecated]
            pub fn new_byte_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([B)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createApplicationRecord](https://developer.android.com/reference/android/nfc/NdefRecord.html#createApplicationRecord(java.lang.String))"]
            pub fn createApplicationRecord<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, NdefRecord>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"createApplicationRecord",
                                c"(Ljava/lang/String;)Landroid/nfc/NdefRecord;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createUri](https://developer.android.com/reference/android/nfc/NdefRecord.html#createUri(java.lang.String))"]
            pub fn createUri_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, NdefRecord>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"createUri",
                                c"(Ljava/lang/String;)Landroid/nfc/NdefRecord;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createMime](https://developer.android.com/reference/android/nfc/NdefRecord.html#createMime(java.lang.String,%20byte[]))"]
            pub fn createMime<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, NdefRecord>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"createMime",
                                c"(Ljava/lang/String;[B)Landroid/nfc/NdefRecord;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createExternal](https://developer.android.com/reference/android/nfc/NdefRecord.html#createExternal(java.lang.String,%20java.lang.String,%20byte[]))"]
            pub fn createExternal<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, NdefRecord>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"createExternal",
                                c"(Ljava/lang/String;Ljava/lang/String;[B)Landroid/nfc/NdefRecord;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[createTextRecord](https://developer.android.com/reference/android/nfc/NdefRecord.html#createTextRecord(java.lang.String,%20java.lang.String))"]
            pub fn createTextRecord<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, NdefRecord>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"createTextRecord",
                                c"(Ljava/lang/String;Ljava/lang/String;)Landroid/nfc/NdefRecord;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getTnf](https://developer.android.com/reference/android/nfc/NdefRecord.html#getTnf())"]
            pub fn getTnf<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i16, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getTnf", c"()S"))
                        })
                        .as_raw();
                    __jni_env.call_short_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getType](https://developer.android.com/reference/android/nfc/NdefRecord.html#getType())"]
            pub fn getType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getType", c"()[B"))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getId](https://developer.android.com/reference/android/nfc/NdefRecord.html#getId())"]
            pub fn getId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getId", c"()[B"))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getPayload](https://developer.android.com/reference/android/nfc/NdefRecord.html#getPayload())"]
            pub fn getPayload<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getPayload", c"()[B"))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toByteArray](https://developer.android.com/reference/android/nfc/NdefRecord.html#toByteArray())"]
            #[deprecated]
            pub fn toByteArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toByteArray",
                                c"()[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toMimeType](https://developer.android.com/reference/android/nfc/NdefRecord.html#toMimeType())"]
            pub fn toMimeType<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toMimeType",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/nfc/NdefRecord.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/android/nfc/NdefRecord.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"hashCode", c"()I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/android/nfc/NdefRecord.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/nfc/NdefRecord.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "**get** public static final [RTD_ALTERNATIVE_CARRIER](https://developer.android.com/reference/android/nfc/NdefRecord.html#RTD_ALTERNATIVE_CARRIER)"]
            pub fn RTD_ALTERNATIVE_CARRIER<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"RTD_ALTERNATIVE_CARRIER",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public static final [RTD_HANDOVER_CARRIER](https://developer.android.com/reference/android/nfc/NdefRecord.html#RTD_HANDOVER_CARRIER)"]
            pub fn RTD_HANDOVER_CARRIER<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"RTD_HANDOVER_CARRIER",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public static final [RTD_HANDOVER_REQUEST](https://developer.android.com/reference/android/nfc/NdefRecord.html#RTD_HANDOVER_REQUEST)"]
            pub fn RTD_HANDOVER_REQUEST<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"RTD_HANDOVER_REQUEST",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public static final [RTD_HANDOVER_SELECT](https://developer.android.com/reference/android/nfc/NdefRecord.html#RTD_HANDOVER_SELECT)"]
            pub fn RTD_HANDOVER_SELECT<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"RTD_HANDOVER_SELECT",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public static final [RTD_SMART_POSTER](https://developer.android.com/reference/android/nfc/NdefRecord.html#RTD_SMART_POSTER)"]
            pub fn RTD_SMART_POSTER<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"RTD_SMART_POSTER",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public static final [RTD_TEXT](https://developer.android.com/reference/android/nfc/NdefRecord.html#RTD_TEXT)"]
            pub fn RTD_TEXT<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"RTD_TEXT",
                                c"[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public static final [RTD_URI](https://developer.android.com/reference/android/nfc/NdefRecord.html#RTD_URI)"]
            pub fn RTD_URI<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(__jni_class, c"RTD_URI", c"[B"))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "public static final [TNF_ABSOLUTE_URI](https://developer.android.com/reference/android/nfc/NdefRecord.html#TNF_ABSOLUTE_URI)"]
            pub const TNF_ABSOLUTE_URI: i16 = 3;
            #[doc = "public static final [TNF_EMPTY](https://developer.android.com/reference/android/nfc/NdefRecord.html#TNF_EMPTY)"]
            pub const TNF_EMPTY: i16 = 0;
            #[doc = "public static final [TNF_EXTERNAL_TYPE](https://developer.android.com/reference/android/nfc/NdefRecord.html#TNF_EXTERNAL_TYPE)"]
            pub const TNF_EXTERNAL_TYPE: i16 = 4;
            #[doc = "public static final [TNF_MIME_MEDIA](https://developer.android.com/reference/android/nfc/NdefRecord.html#TNF_MIME_MEDIA)"]
            pub const TNF_MIME_MEDIA: i16 = 2;
            #[doc = "public static final [TNF_UNCHANGED](https://developer.android.com/reference/android/nfc/NdefRecord.html#TNF_UNCHANGED)"]
            pub const TNF_UNCHANGED: i16 = 6;
            #[doc = "public static final [TNF_UNKNOWN](https://developer.android.com/reference/android/nfc/NdefRecord.html#TNF_UNKNOWN)"]
            pub const TNF_UNKNOWN: i16 = 5;
            #[doc = "public static final [TNF_WELL_KNOWN](https://developer.android.com/reference/android/nfc/NdefRecord.html#TNF_WELL_KNOWN)"]
            pub const TNF_WELL_KNOWN: i16 = 1;
        }
        #[doc = "pub final class [NfcAdapter](https://developer.android.com/reference/android/nfc/NfcAdapter.html)"]
        pub enum NfcAdapter {}
        unsafe impl ::java_spaghetti::ReferenceType for NfcAdapter {}
        unsafe impl ::java_spaghetti::JniType for NfcAdapter {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NfcAdapter")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NfcAdapter {}
        impl NfcAdapter {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/NfcAdapter"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getDefaultAdapter](https://developer.android.com/reference/android/nfc/NfcAdapter.html#getDefaultAdapter(android.content.Context))"]
            pub fn getDefaultAdapter<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, NfcAdapter>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"getDefaultAdapter",
                                c"(Landroid/content/Context;)Landroid/nfc/NfcAdapter;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isEnabled](https://developer.android.com/reference/android/nfc/NfcAdapter.html#isEnabled())"]
            pub fn isEnabled<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isEnabled", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setBeamPushUrisCallback](https://developer.android.com/reference/android/nfc/NfcAdapter.html#setBeamPushUrisCallback(android.nfc.NfcAdapter.CreateBeamUrisCallback,%20android.app.Activity))"]
            #[deprecated]
            pub fn setBeamPushUrisCallback<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<NfcAdapter_CreateBeamUrisCallback>,
                arg1: impl ::java_spaghetti::AsArg<super::app::Activity>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setBeamPushUrisCallback",
                                c"(Landroid/nfc/NfcAdapter$CreateBeamUrisCallback;Landroid/app/Activity;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setNdefPushMessage](https://developer.android.com/reference/android/nfc/NfcAdapter.html#setNdefPushMessage(android.nfc.NdefMessage,%20android.app.Activity,%20android.app.Activity...))"]
            #[deprecated]
            pub fn setNdefPushMessage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<NdefMessage>,
                arg1: impl ::java_spaghetti::AsArg<super::app::Activity>,
                arg2: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::app::Activity, super::super::java::lang::Throwable>,
                >,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setNdefPushMessage",
                                c"(Landroid/nfc/NdefMessage;Landroid/app/Activity;[Landroid/app/Activity;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setNdefPushMessageCallback](https://developer.android.com/reference/android/nfc/NfcAdapter.html#setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,%20android.app.Activity,%20android.app.Activity...))"]
            #[deprecated]
            pub fn setNdefPushMessageCallback<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<NfcAdapter_CreateNdefMessageCallback>,
                arg1: impl ::java_spaghetti::AsArg<super::app::Activity>,
                arg2: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::app::Activity, super::super::java::lang::Throwable>,
                >,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"setNdefPushMessageCallback" , c"(Landroid/nfc/NfcAdapter$CreateNdefMessageCallback;Landroid/app/Activity;[Landroid/app/Activity;)V" ))). as_raw ();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setOnNdefPushCompleteCallback](https://developer.android.com/reference/android/nfc/NfcAdapter.html#setOnNdefPushCompleteCallback(android.nfc.NfcAdapter.OnNdefPushCompleteCallback,%20android.app.Activity,%20android.app.Activity...))"]
            #[deprecated]
            pub fn setOnNdefPushCompleteCallback<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<NfcAdapter_OnNdefPushCompleteCallback>,
                arg1: impl ::java_spaghetti::AsArg<super::app::Activity>,
                arg2: impl ::java_spaghetti::AsArg<
                    ::java_spaghetti::ObjectArray<super::app::Activity, super::super::java::lang::Throwable>,
                >,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"setOnNdefPushCompleteCallback" , c"(Landroid/nfc/NfcAdapter$OnNdefPushCompleteCallback;Landroid/app/Activity;[Landroid/app/Activity;)V" ))). as_raw ();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[disableForegroundDispatch](https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableForegroundDispatch(android.app.Activity))"]
            pub fn disableForegroundDispatch<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::app::Activity>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"disableForegroundDispatch",
                                c"(Landroid/app/Activity;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enableReaderMode](https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableReaderMode(android.app.Activity,%20android.nfc.NfcAdapter.ReaderCallback,%20int,%20android.os.Bundle))"]
            pub fn enableReaderMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::app::Activity>,
                arg1: impl ::java_spaghetti::AsArg<NfcAdapter_ReaderCallback>,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<super::os::Bundle>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enableReaderMode",
                                c"(Landroid/app/Activity;Landroid/nfc/NfcAdapter$ReaderCallback;ILandroid/os/Bundle;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[disableReaderMode](https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableReaderMode(android.app.Activity))"]
            pub fn disableReaderMode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::app::Activity>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"disableReaderMode",
                                c"(Landroid/app/Activity;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[invokeBeam](https://developer.android.com/reference/android/nfc/NfcAdapter.html#invokeBeam(android.app.Activity))"]
            #[deprecated]
            pub fn invokeBeam<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::app::Activity>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"invokeBeam",
                                c"(Landroid/app/Activity;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[enableForegroundNdefPush](https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableForegroundNdefPush(android.app.Activity,%20android.nfc.NdefMessage))"]
            #[deprecated]
            pub fn enableForegroundNdefPush<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::app::Activity>,
                arg1: impl ::java_spaghetti::AsArg<NdefMessage>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"enableForegroundNdefPush",
                                c"(Landroid/app/Activity;Landroid/nfc/NdefMessage;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[disableForegroundNdefPush](https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableForegroundNdefPush(android.app.Activity))"]
            #[deprecated]
            pub fn disableForegroundNdefPush<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::app::Activity>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"disableForegroundNdefPush",
                                c"(Landroid/app/Activity;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isSecureNfcSupported](https://developer.android.com/reference/android/nfc/NfcAdapter.html#isSecureNfcSupported())"]
            pub fn isSecureNfcSupported<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isSecureNfcSupported",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isSecureNfcEnabled](https://developer.android.com/reference/android/nfc/NfcAdapter.html#isSecureNfcEnabled())"]
            pub fn isSecureNfcEnabled<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isSecureNfcEnabled",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isNdefPushEnabled](https://developer.android.com/reference/android/nfc/NfcAdapter.html#isNdefPushEnabled())"]
            #[deprecated]
            pub fn isNdefPushEnabled<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isNdefPushEnabled",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "public static final [ACTION_ADAPTER_STATE_CHANGED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_ADAPTER_STATE_CHANGED)"]
            pub const ACTION_ADAPTER_STATE_CHANGED: &'static str = "android.nfc.action.ADAPTER_STATE_CHANGED";
            #[doc = "public static final [ACTION_NDEF_DISCOVERED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_NDEF_DISCOVERED)"]
            pub const ACTION_NDEF_DISCOVERED: &'static str = "android.nfc.action.NDEF_DISCOVERED";
            #[doc = "public static final [ACTION_PREFERRED_PAYMENT_CHANGED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_PREFERRED_PAYMENT_CHANGED)"]
            pub const ACTION_PREFERRED_PAYMENT_CHANGED: &'static str = "android.nfc.action.PREFERRED_PAYMENT_CHANGED";
            #[doc = "public static final [ACTION_TAG_DISCOVERED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_TAG_DISCOVERED)"]
            pub const ACTION_TAG_DISCOVERED: &'static str = "android.nfc.action.TAG_DISCOVERED";
            #[doc = "public static final [ACTION_TECH_DISCOVERED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_TECH_DISCOVERED)"]
            pub const ACTION_TECH_DISCOVERED: &'static str = "android.nfc.action.TECH_DISCOVERED";
            #[doc = "public static final [ACTION_TRANSACTION_DETECTED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_TRANSACTION_DETECTED)"]
            pub const ACTION_TRANSACTION_DETECTED: &'static str = "android.nfc.action.TRANSACTION_DETECTED";
            #[doc = "public static final [EXTRA_ADAPTER_STATE](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_ADAPTER_STATE)"]
            pub const EXTRA_ADAPTER_STATE: &'static str = "android.nfc.extra.ADAPTER_STATE";
            #[doc = "public static final [EXTRA_AID](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_AID)"]
            pub const EXTRA_AID: &'static str = "android.nfc.extra.AID";
            #[doc = "public static final [EXTRA_DATA](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_DATA)"]
            pub const EXTRA_DATA: &'static str = "android.nfc.extra.DATA";
            #[doc = "public static final [EXTRA_ID](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_ID)"]
            pub const EXTRA_ID: &'static str = "android.nfc.extra.ID";
            #[doc = "public static final [EXTRA_NDEF_MESSAGES](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_NDEF_MESSAGES)"]
            pub const EXTRA_NDEF_MESSAGES: &'static str = "android.nfc.extra.NDEF_MESSAGES";
            #[doc = "public static final [EXTRA_PREFERRED_PAYMENT_CHANGED_REASON](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_PREFERRED_PAYMENT_CHANGED_REASON)"]
            pub const EXTRA_PREFERRED_PAYMENT_CHANGED_REASON: &'static str =
                "android.nfc.extra.PREFERRED_PAYMENT_CHANGED_REASON";
            #[doc = "public static final [EXTRA_READER_PRESENCE_CHECK_DELAY](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_READER_PRESENCE_CHECK_DELAY)"]
            pub const EXTRA_READER_PRESENCE_CHECK_DELAY: &'static str = "presence";
            #[doc = "public static final [EXTRA_SECURE_ELEMENT_NAME](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_SECURE_ELEMENT_NAME)"]
            pub const EXTRA_SECURE_ELEMENT_NAME: &'static str = "android.nfc.extra.SECURE_ELEMENT_NAME";
            #[doc = "public static final [EXTRA_TAG](https://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_TAG)"]
            pub const EXTRA_TAG: &'static str = "android.nfc.extra.TAG";
            #[doc = "public static final [FLAG_READER_NFC_A](https://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_A)"]
            pub const FLAG_READER_NFC_A: i32 = 1;
            #[doc = "public static final [FLAG_READER_NFC_B](https://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_B)"]
            pub const FLAG_READER_NFC_B: i32 = 2;
            #[doc = "public static final [FLAG_READER_NFC_BARCODE](https://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_BARCODE)"]
            pub const FLAG_READER_NFC_BARCODE: i32 = 16;
            #[doc = "public static final [FLAG_READER_NFC_F](https://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_F)"]
            pub const FLAG_READER_NFC_F: i32 = 4;
            #[doc = "public static final [FLAG_READER_NFC_V](https://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_V)"]
            pub const FLAG_READER_NFC_V: i32 = 8;
            #[doc = "public static final [FLAG_READER_NO_PLATFORM_SOUNDS](https://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NO_PLATFORM_SOUNDS)"]
            pub const FLAG_READER_NO_PLATFORM_SOUNDS: i32 = 256;
            #[doc = "public static final [FLAG_READER_SKIP_NDEF_CHECK](https://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_SKIP_NDEF_CHECK)"]
            pub const FLAG_READER_SKIP_NDEF_CHECK: i32 = 128;
            #[doc = "public static final [PREFERRED_PAYMENT_CHANGED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#PREFERRED_PAYMENT_CHANGED)"]
            pub const PREFERRED_PAYMENT_CHANGED: i32 = 2;
            #[doc = "public static final [PREFERRED_PAYMENT_LOADED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#PREFERRED_PAYMENT_LOADED)"]
            pub const PREFERRED_PAYMENT_LOADED: i32 = 1;
            #[doc = "public static final [PREFERRED_PAYMENT_UPDATED](https://developer.android.com/reference/android/nfc/NfcAdapter.html#PREFERRED_PAYMENT_UPDATED)"]
            pub const PREFERRED_PAYMENT_UPDATED: i32 = 3;
            #[doc = "public static final [STATE_OFF](https://developer.android.com/reference/android/nfc/NfcAdapter.html#STATE_OFF)"]
            pub const STATE_OFF: i32 = 1;
            #[doc = "public static final [STATE_ON](https://developer.android.com/reference/android/nfc/NfcAdapter.html#STATE_ON)"]
            pub const STATE_ON: i32 = 3;
            #[doc = "public static final [STATE_TURNING_OFF](https://developer.android.com/reference/android/nfc/NfcAdapter.html#STATE_TURNING_OFF)"]
            pub const STATE_TURNING_OFF: i32 = 4;
            #[doc = "public static final [STATE_TURNING_ON](https://developer.android.com/reference/android/nfc/NfcAdapter.html#STATE_TURNING_ON)"]
            pub const STATE_TURNING_ON: i32 = 2;
        }
        #[doc = "pub interface [NfcAdapter.CreateBeamUrisCallback](https://developer.android.com/reference/android/nfc/NfcAdapter.CreateBeamUrisCallback.html)"]
        #[deprecated]
        pub enum NfcAdapter_CreateBeamUrisCallback {}
        unsafe impl ::java_spaghetti::ReferenceType for NfcAdapter_CreateBeamUrisCallback {}
        unsafe impl ::java_spaghetti::JniType for NfcAdapter_CreateBeamUrisCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NfcAdapter$CreateBeamUrisCallback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NfcAdapter_CreateBeamUrisCallback {}
        impl NfcAdapter_CreateBeamUrisCallback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/nfc/NfcAdapter$CreateBeamUrisCallback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
        }
        #[doc = "pub interface [NfcAdapter.CreateNdefMessageCallback](https://developer.android.com/reference/android/nfc/NfcAdapter.CreateNdefMessageCallback.html)"]
        #[deprecated]
        pub enum NfcAdapter_CreateNdefMessageCallback {}
        unsafe impl ::java_spaghetti::ReferenceType for NfcAdapter_CreateNdefMessageCallback {}
        unsafe impl ::java_spaghetti::JniType for NfcAdapter_CreateNdefMessageCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NfcAdapter$CreateNdefMessageCallback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NfcAdapter_CreateNdefMessageCallback {}
        impl NfcAdapter_CreateNdefMessageCallback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/nfc/NfcAdapter$CreateNdefMessageCallback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[createNdefMessage](https://developer.android.com/reference/android/nfc/NfcAdapter.CreateNdefMessageCallback.html#createNdefMessage(android.nfc.NfcEvent))"]
            #[deprecated]
            pub fn createNdefMessage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<NfcEvent>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, NdefMessage>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"createNdefMessage",
                                c"(Landroid/nfc/NfcEvent;)Landroid/nfc/NdefMessage;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub interface [NfcAdapter.OnNdefPushCompleteCallback](https://developer.android.com/reference/android/nfc/NfcAdapter.OnNdefPushCompleteCallback.html)"]
        #[deprecated]
        pub enum NfcAdapter_OnNdefPushCompleteCallback {}
        unsafe impl ::java_spaghetti::ReferenceType for NfcAdapter_OnNdefPushCompleteCallback {}
        unsafe impl ::java_spaghetti::JniType for NfcAdapter_OnNdefPushCompleteCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NfcAdapter$OnNdefPushCompleteCallback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NfcAdapter_OnNdefPushCompleteCallback {}
        impl NfcAdapter_OnNdefPushCompleteCallback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/nfc/NfcAdapter$OnNdefPushCompleteCallback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[onNdefPushComplete](https://developer.android.com/reference/android/nfc/NfcAdapter.OnNdefPushCompleteCallback.html#onNdefPushComplete(android.nfc.NfcEvent))"]
            #[deprecated]
            pub fn onNdefPushComplete<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<NfcEvent>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onNdefPushComplete",
                                c"(Landroid/nfc/NfcEvent;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub interface [NfcAdapter.OnTagRemovedListener](https://developer.android.com/reference/android/nfc/NfcAdapter.OnTagRemovedListener.html)"]
        pub enum NfcAdapter_OnTagRemovedListener {}
        unsafe impl ::java_spaghetti::ReferenceType for NfcAdapter_OnTagRemovedListener {}
        unsafe impl ::java_spaghetti::JniType for NfcAdapter_OnTagRemovedListener {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NfcAdapter$OnTagRemovedListener")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NfcAdapter_OnTagRemovedListener {}
        impl NfcAdapter_OnTagRemovedListener {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/nfc/NfcAdapter$OnTagRemovedListener"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[onTagRemoved](https://developer.android.com/reference/android/nfc/NfcAdapter.OnTagRemovedListener.html#onTagRemoved())"]
            pub fn onTagRemoved<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onTagRemoved",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub interface [NfcAdapter.ReaderCallback](https://developer.android.com/reference/android/nfc/NfcAdapter.ReaderCallback.html)"]
        pub enum NfcAdapter_ReaderCallback {}
        unsafe impl ::java_spaghetti::ReferenceType for NfcAdapter_ReaderCallback {}
        unsafe impl ::java_spaghetti::JniType for NfcAdapter_ReaderCallback {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NfcAdapter$ReaderCallback")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NfcAdapter_ReaderCallback {}
        impl NfcAdapter_ReaderCallback {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/nfc/NfcAdapter$ReaderCallback"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[onTagDiscovered](https://developer.android.com/reference/android/nfc/NfcAdapter.ReaderCallback.html#onTagDiscovered(android.nfc.Tag))"]
            pub fn onTagDiscovered<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Tag>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"onTagDiscovered",
                                c"(Landroid/nfc/Tag;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_embassy_1rs_rnfc_proxy_android_nfc_NfcAdapter_1ReaderCallback_native_1onTagDiscovered__JLandroid_nfc_Tag_2(
            __jni_env: ::java_spaghetti::Env<'_>,
            _class: *mut (),
            ptr: i64,
            arg0: ::java_spaghetti::Arg<Tag>,
        ) {
            let ptr: *const std::sync::Arc<dyn NfcAdapter_ReaderCallbackProxy> =
                ::std::ptr::with_exposed_provenance(ptr as usize);
            unsafe { (*ptr).onTagDiscovered(__jni_env, arg0.into_ref(__jni_env)) }
        }
        pub trait NfcAdapter_ReaderCallbackProxy: ::std::marker::Send + ::std::marker::Sync + 'static {
            fn onTagDiscovered<'env>(
                &self,
                env: ::java_spaghetti::Env<'env>,
                arg0: ::std::option::Option<::java_spaghetti::Ref<'env, Tag>>,
            );
        }
        #[unsafe(no_mangle)]
        extern "system" fn Java_com_github_embassy_1rs_rnfc_proxy_android_nfc_NfcAdapter_1ReaderCallback_native_1finalize__J(
            __jni_env: ::java_spaghetti::Env<'_>,
            _class: *mut (),
            ptr: i64,
        ) {
            let ptr: *mut std::sync::Arc<dyn NfcAdapter_ReaderCallbackProxy> =
                ::std::ptr::with_exposed_provenance_mut(ptr as usize);
            let _ = unsafe { Box::from_raw(ptr) };
        }
        impl NfcAdapter_ReaderCallback {
            pub fn new_proxy<'env>(
                env: ::java_spaghetti::Env<'env>,
                proxy: ::std::sync::Arc<dyn NfcAdapter_ReaderCallbackProxy>,
            ) -> Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>>
            {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                let __jni_class = __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            env,
                            env.require_class(c"com/github/embassy_rs/rnfc/proxy/android/nfc/NfcAdapter_ReaderCallback"),
                        )
                        .as_global()
                    })
                    .as_raw();
                let b = ::std::boxed::Box::new(proxy);
                let ptr = ::std::boxed::Box::into_raw(b);
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::sys::jvalue {
                        j: ptr.expose_provenance() as i64,
                    }];
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(env.require_method(__jni_class, c"<init>", c"(J)V"))
                        })
                        .as_raw();
                    env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub final class [NfcEvent](https://developer.android.com/reference/android/nfc/NfcEvent.html)"]
        pub enum NfcEvent {}
        unsafe impl ::java_spaghetti::ReferenceType for NfcEvent {}
        unsafe impl ::java_spaghetti::JniType for NfcEvent {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NfcEvent")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NfcEvent {}
        impl NfcEvent {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/NfcEvent"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "**get** public final [nfcAdapter](https://developer.android.com/reference/android/nfc/NfcEvent.html#nfcAdapter)"]
            pub fn nfcAdapter<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, NfcAdapter>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_env = self.env();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_field(
                                __jni_class,
                                c"nfcAdapter",
                                c"Landroid/nfc/NfcAdapter;",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_object_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public final [peerLlcpMajorVersion](https://developer.android.com/reference/android/nfc/NfcEvent.html#peerLlcpMajorVersion)"]
            pub fn peerLlcpMajorVersion<'env>(self: &::java_spaghetti::Ref<'env, Self>) -> i32 {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_env = self.env();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_field(
                                __jni_class,
                                c"peerLlcpMajorVersion",
                                c"I",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_int_field(__jni_class, __jni_field)
                }
            }
            #[doc = "**get** public final [peerLlcpMinorVersion](https://developer.android.com/reference/android/nfc/NfcEvent.html#peerLlcpMinorVersion)"]
            pub fn peerLlcpMinorVersion<'env>(self: &::java_spaghetti::Ref<'env, Self>) -> i32 {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_env = self.env();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_field(
                                __jni_class,
                                c"peerLlcpMinorVersion",
                                c"I",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_int_field(__jni_class, __jni_field)
                }
            }
        }
        #[doc = "pub final class [NfcManager](https://developer.android.com/reference/android/nfc/NfcManager.html)"]
        pub enum NfcManager {}
        unsafe impl ::java_spaghetti::ReferenceType for NfcManager {}
        unsafe impl ::java_spaghetti::JniType for NfcManager {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/NfcManager")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for NfcManager {}
        impl NfcManager {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/NfcManager"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getDefaultAdapter](https://developer.android.com/reference/android/nfc/NfcManager.html#getDefaultAdapter())"]
            pub fn getDefaultAdapter<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, NfcAdapter>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getDefaultAdapter",
                                c"()Landroid/nfc/NfcAdapter;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub final class [Tag](https://developer.android.com/reference/android/nfc/Tag.html)"]
        pub enum Tag {}
        unsafe impl ::java_spaghetti::ReferenceType for Tag {}
        unsafe impl ::java_spaghetti::JniType for Tag {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/Tag")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for Tag {}
        impl Tag {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/Tag")).as_global()
                    })
                    .as_raw()
            }
            #[doc = "[getId](https://developer.android.com/reference/android/nfc/Tag.html#getId())"]
            pub fn getId<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getId", c"()[B"))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getTechList](https://developer.android.com/reference/android/nfc/Tag.html#getTechList())"]
            pub fn getTechList<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<
                        'env,
                        ::java_spaghetti::ObjectArray<super::super::java::lang::String, super::super::java::lang::Throwable>,
                    >,
                >,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getTechList",
                                c"()[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/nfc/Tag.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/nfc/Tag.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub class [TagLostException](https://developer.android.com/reference/android/nfc/TagLostException.html)"]
        pub enum TagLostException {}
        unsafe impl ::java_spaghetti::ReferenceType for TagLostException {}
        unsafe impl ::java_spaghetti::JniType for TagLostException {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/nfc/TagLostException")
            }
        }
        impl TagLostException {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/nfc/TagLostException"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[TagLostException](https://developer.android.com/reference/android/nfc/TagLostException.html#TagLostException())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[TagLostException](https://developer.android.com/reference/android/nfc/TagLostException.html#TagLostException(java.lang.String))"]
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod os {
        #[doc = "pub final class [Bundle](https://developer.android.com/reference/android/os/Bundle.html)"]
        pub enum Bundle {}
        unsafe impl ::java_spaghetti::ReferenceType for Bundle {}
        unsafe impl ::java_spaghetti::JniType for Bundle {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/os/Bundle")
            }
        }
        impl Bundle {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"android/os/Bundle")).as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Bundle](https://developer.android.com/reference/android/os/Bundle.html#Bundle())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[Bundle](https://developer.android.com/reference/android/os/Bundle.html#Bundle(int))"]
            pub fn new_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"(I)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[Bundle](https://developer.android.com/reference/android/os/Bundle.html#Bundle(android.os.Bundle))"]
            pub fn new_Bundle<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Bundle>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Landroid/os/Bundle;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clone](https://developer.android.com/reference/android/os/Bundle.html#clone())"]
            pub fn clone<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"clone",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[deepCopy](https://developer.android.com/reference/android/os/Bundle.html#deepCopy())"]
            pub fn deepCopy<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Bundle>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"deepCopy",
                                c"()Landroid/os/Bundle;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[clear](https://developer.android.com/reference/android/os/Bundle.html#clear())"]
            pub fn clear<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"clear", c"()V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[remove](https://developer.android.com/reference/android/os/Bundle.html#remove(java.lang.String))"]
            pub fn remove<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"remove",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putAll](https://developer.android.com/reference/android/os/Bundle.html#putAll(android.os.Bundle))"]
            pub fn putAll<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Bundle>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putAll",
                                c"(Landroid/os/Bundle;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hasFileDescriptors](https://developer.android.com/reference/android/os/Bundle.html#hasFileDescriptors())"]
            pub fn hasFileDescriptors<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"hasFileDescriptors",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putByte](https://developer.android.com/reference/android/os/Bundle.html#putByte(java.lang.String,%20byte))"]
            pub fn putByte<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i8,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putByte",
                                c"(Ljava/lang/String;B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putChar](https://developer.android.com/reference/android/os/Bundle.html#putChar(java.lang.String,%20char))"]
            pub fn putChar<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: u16,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putChar",
                                c"(Ljava/lang/String;C)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putShort](https://developer.android.com/reference/android/os/Bundle.html#putShort(java.lang.String,%20short))"]
            pub fn putShort<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i16,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putShort",
                                c"(Ljava/lang/String;S)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putFloat](https://developer.android.com/reference/android/os/Bundle.html#putFloat(java.lang.String,%20float))"]
            pub fn putFloat<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: f32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putFloat",
                                c"(Ljava/lang/String;F)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putByteArray](https://developer.android.com/reference/android/os/Bundle.html#putByteArray(java.lang.String,%20byte[]))"]
            pub fn putByteArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putByteArray",
                                c"(Ljava/lang/String;[B)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putShortArray](https://developer.android.com/reference/android/os/Bundle.html#putShortArray(java.lang.String,%20short[]))"]
            pub fn putShortArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ShortArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putShortArray",
                                c"(Ljava/lang/String;[S)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putCharArray](https://developer.android.com/reference/android/os/Bundle.html#putCharArray(java.lang.String,%20char[]))"]
            pub fn putCharArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putCharArray",
                                c"(Ljava/lang/String;[C)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putFloatArray](https://developer.android.com/reference/android/os/Bundle.html#putFloatArray(java.lang.String,%20float[]))"]
            pub fn putFloatArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::FloatArray>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putFloatArray",
                                c"(Ljava/lang/String;[F)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[putBundle](https://developer.android.com/reference/android/os/Bundle.html#putBundle(java.lang.String,%20android.os.Bundle))"]
            pub fn putBundle<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: impl ::java_spaghetti::AsArg<Bundle>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"putBundle",
                                c"(Ljava/lang/String;Landroid/os/Bundle;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getByte](https://developer.android.com/reference/android/os/Bundle.html#getByte(java.lang.String))"]
            pub fn getByte_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i8, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getByte",
                                c"(Ljava/lang/String;)B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_byte_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getChar](https://developer.android.com/reference/android/os/Bundle.html#getChar(java.lang.String))"]
            pub fn getChar_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<u16, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getChar",
                                c"(Ljava/lang/String;)C",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_char_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getChar](https://developer.android.com/reference/android/os/Bundle.html#getChar(java.lang.String,%20char))"]
            pub fn getChar_String_char<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: u16,
            ) -> ::std::result::Result<u16, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getChar",
                                c"(Ljava/lang/String;C)C",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_char_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getShort](https://developer.android.com/reference/android/os/Bundle.html#getShort(java.lang.String))"]
            pub fn getShort_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<i16, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getShort",
                                c"(Ljava/lang/String;)S",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_short_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getShort](https://developer.android.com/reference/android/os/Bundle.html#getShort(java.lang.String,%20short))"]
            pub fn getShort_String_short<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: i16,
            ) -> ::std::result::Result<i16, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getShort",
                                c"(Ljava/lang/String;S)S",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_short_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getFloat](https://developer.android.com/reference/android/os/Bundle.html#getFloat(java.lang.String))"]
            pub fn getFloat_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<f32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getFloat",
                                c"(Ljava/lang/String;)F",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_float_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getFloat](https://developer.android.com/reference/android/os/Bundle.html#getFloat(java.lang.String,%20float))"]
            pub fn getFloat_String_float<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
                arg1: f32,
            ) -> ::std::result::Result<f32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getFloat",
                                c"(Ljava/lang/String;F)F",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_float_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBundle](https://developer.android.com/reference/android/os/Bundle.html#getBundle(java.lang.String))"]
            pub fn getBundle<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Bundle>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBundle",
                                c"(Ljava/lang/String;)Landroid/os/Bundle;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getByteArray](https://developer.android.com/reference/android/os/Bundle.html#getByteArray(java.lang.String))"]
            pub fn getByteArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getByteArray",
                                c"(Ljava/lang/String;)[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getShortArray](https://developer.android.com/reference/android/os/Bundle.html#getShortArray(java.lang.String))"]
            pub fn getShortArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ShortArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getShortArray",
                                c"(Ljava/lang/String;)[S",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCharArray](https://developer.android.com/reference/android/os/Bundle.html#getCharArray(java.lang.String))"]
            pub fn getCharArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::CharArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCharArray",
                                c"(Ljava/lang/String;)[C",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getFloatArray](https://developer.android.com/reference/android/os/Bundle.html#getFloatArray(java.lang.String))"]
            pub fn getFloatArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::FloatArray>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getFloatArray",
                                c"(Ljava/lang/String;)[F",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[describeContents](https://developer.android.com/reference/android/os/Bundle.html#describeContents())"]
            pub fn describeContents<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"describeContents",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/android/os/Bundle.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::String>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "**get** public static final [EMPTY](https://developer.android.com/reference/android/os/Bundle.html#EMPTY)"]
            pub fn EMPTY<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::option::Option<::java_spaghetti::Local<'env, Bundle>> {
                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                let __jni_class = Self::__class_global_ref(__jni_env);
                unsafe {
                    let __jni_field = __FIELD
                        .get_or_init(|| {
                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                __jni_class,
                                c"EMPTY",
                                c"Landroid/os/Bundle;",
                            ))
                        })
                        .as_raw();
                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                }
            }
        }
    }

    pub mod view {
        #[doc = "pub class [ContextThemeWrapper](https://developer.android.com/reference/android/view/ContextThemeWrapper.html)"]
        pub enum ContextThemeWrapper {}
        unsafe impl ::java_spaghetti::ReferenceType for ContextThemeWrapper {}
        unsafe impl ::java_spaghetti::JniType for ContextThemeWrapper {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"android/view/ContextThemeWrapper")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::content::ContextWrapper> for ContextThemeWrapper {}
        unsafe impl ::java_spaghetti::AssignableTo<super::content::Context> for ContextThemeWrapper {}
        unsafe impl ::java_spaghetti::AssignableTo<super::super::java::lang::Object> for ContextThemeWrapper {}
        impl ContextThemeWrapper {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::super::java::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(
                            __jni_env,
                            __jni_env.require_class(c"android/view/ContextThemeWrapper"),
                        )
                        .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[ContextThemeWrapper](https://developer.android.com/reference/android/view/ContextThemeWrapper.html#ContextThemeWrapper())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[ContextThemeWrapper](https://developer.android.com/reference/android/view/ContextThemeWrapper.html#ContextThemeWrapper(android.content.Context,%20int))"]
            pub fn new_Context_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<super::content::Context>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::java_spaghetti::Local<'env, Self>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Landroid/content/Context;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setTheme](https://developer.android.com/reference/android/view/ContextThemeWrapper.html#setTheme(int))"]
            pub fn setTheme_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"setTheme", c"(I)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSystemService](https://developer.android.com/reference/android/view/ContextThemeWrapper.html#getSystemService(java.lang.String))"]
            pub fn getSystemService<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<super::super::java::lang::String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::super::java::lang::Object>>,
                ::java_spaghetti::Local<'env, super::super::java::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSystemService",
                                c"(Ljava/lang/String;)Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }
}

pub mod java {

    pub mod lang {
        #[doc = "pub class [Object](https://developer.android.com/reference/java/lang/Object.html)"]
        pub enum Object {}
        unsafe impl ::java_spaghetti::ReferenceType for Object {}
        unsafe impl ::java_spaghetti::JniType for Object {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/Object")
            }
        }
        impl Object {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/lang/Object")).as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Object](https://developer.android.com/reference/java/lang/Object.html#Object())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/java/lang/Object.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"hashCode", c"()I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/java/lang/Object.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[notify](https://developer.android.com/reference/java/lang/Object.html#notify())"]
            pub fn notify<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"notify", c"()V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[notifyAll](https://developer.android.com/reference/java/lang/Object.html#notifyAll())"]
            pub fn notifyAll<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"notifyAll", c"()V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[wait](https://developer.android.com/reference/java/lang/Object.html#wait(long))"]
            pub fn wait_long<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"wait", c"(J)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[wait](https://developer.android.com/reference/java/lang/Object.html#wait(long,%20int))"]
            pub fn wait_long_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i64,
                arg1: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"wait", c"(JI)V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[wait](https://developer.android.com/reference/java/lang/Object.html#wait())"]
            pub fn wait<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"wait", c"()V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub final class [StackTraceElement](https://developer.android.com/reference/java/lang/StackTraceElement.html)"]
        pub enum StackTraceElement {}
        unsafe impl ::java_spaghetti::ReferenceType for StackTraceElement {}
        unsafe impl ::java_spaghetti::JniType for StackTraceElement {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/StackTraceElement")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for StackTraceElement {}
        impl StackTraceElement {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/lang/StackTraceElement"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[StackTraceElement](https://developer.android.com/reference/java/lang/StackTraceElement.html#StackTraceElement(java.lang.String,%20java.lang.String,%20java.lang.String,%20int))"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
                arg2: impl ::java_spaghetti::AsArg<String>,
                arg3: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getFileName](https://developer.android.com/reference/java/lang/StackTraceElement.html#getFileName())"]
            pub fn getFileName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getFileName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getLineNumber](https://developer.android.com/reference/java/lang/StackTraceElement.html#getLineNumber())"]
            pub fn getLineNumber<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLineNumber",
                                c"()I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getClassName](https://developer.android.com/reference/java/lang/StackTraceElement.html#getClassName())"]
            pub fn getClassName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getClassName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMethodName](https://developer.android.com/reference/java/lang/StackTraceElement.html#getMethodName())"]
            pub fn getMethodName<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMethodName",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isNativeMethod](https://developer.android.com/reference/java/lang/StackTraceElement.html#isNativeMethod())"]
            pub fn isNativeMethod<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"isNativeMethod",
                                c"()Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/java/lang/StackTraceElement.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/java/lang/StackTraceElement.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/java/lang/StackTraceElement.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"hashCode", c"()I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub final class [String](https://developer.android.com/reference/java/lang/String.html)"]
        pub enum String {}
        unsafe impl ::java_spaghetti::ReferenceType for String {}
        unsafe impl ::java_spaghetti::JniType for String {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/String")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for String {}
        impl String {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/lang/String")).as_global()
                    })
                    .as_raw()
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(java.lang.String))"]
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(char[]))"]
            pub fn new_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([C)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(char[],%20int,%20int))"]
            pub fn new_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([CII)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(int[],%20int,%20int))"]
            pub fn new_int_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::IntArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([III)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(byte[],%20int,%20int,%20int))"]
            #[deprecated]
            pub fn new_byte_array_int_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([BIII)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(byte[],%20int))"]
            #[deprecated]
            pub fn new_byte_array_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([BI)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(byte[],%20int,%20int,%20java.lang.String))"]
            pub fn new_byte_array_int_int_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
                arg3: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([BIILjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(byte[],%20java.lang.String))"]
            pub fn new_byte_array_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"([BLjava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(byte[],%20int,%20int))"]
            pub fn new_byte_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([BII)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[String](https://developer.android.com/reference/java/lang/String.html#String(byte[]))"]
            pub fn new_byte_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"([B)V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[length](https://developer.android.com/reference/java/lang/String.html#length())"]
            pub fn length<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"length", c"()I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isEmpty](https://developer.android.com/reference/java/lang/String.html#isEmpty())"]
            pub fn isEmpty<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isEmpty", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[charAt](https://developer.android.com/reference/java/lang/String.html#charAt(int))"]
            pub fn charAt<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<u16, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"charAt", c"(I)C"))
                        })
                        .as_raw();
                    __jni_env.call_char_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[codePointAt](https://developer.android.com/reference/java/lang/String.html#codePointAt(int))"]
            pub fn codePointAt<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"codePointAt",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[codePointBefore](https://developer.android.com/reference/java/lang/String.html#codePointBefore(int))"]
            pub fn codePointBefore<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"codePointBefore",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[codePointCount](https://developer.android.com/reference/java/lang/String.html#codePointCount(int,%20int))"]
            pub fn codePointCount<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"codePointCount",
                                c"(II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[offsetByCodePoints](https://developer.android.com/reference/java/lang/String.html#offsetByCodePoints(int,%20int))"]
            pub fn offsetByCodePoints<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"offsetByCodePoints",
                                c"(II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getChars](https://developer.android.com/reference/java/lang/String.html#getChars(int,%20int,%20char[],%20int))"]
            pub fn getChars<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getChars",
                                c"(II[CI)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBytes](https://developer.android.com/reference/java/lang/String.html#getBytes(int,%20int,%20byte[],%20int))"]
            #[deprecated]
            pub fn getBytes_int_int_byte_array_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<::java_spaghetti::ByteArray>,
                arg3: i32,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBytes",
                                c"(II[BI)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBytes](https://developer.android.com/reference/java/lang/String.html#getBytes(java.lang.String))"]
            pub fn getBytes_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getBytes",
                                c"(Ljava/lang/String;)[B",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getBytes](https://developer.android.com/reference/java/lang/String.html#getBytes())"]
            pub fn getBytes<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ByteArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"getBytes", c"()[B"))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equals](https://developer.android.com/reference/java/lang/String.html#equals(java.lang.Object))"]
            pub fn equals<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equals",
                                c"(Ljava/lang/Object;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[equalsIgnoreCase](https://developer.android.com/reference/java/lang/String.html#equalsIgnoreCase(java.lang.String))"]
            pub fn equalsIgnoreCase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"equalsIgnoreCase",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[compareTo](https://developer.android.com/reference/java/lang/String.html#compareTo(java.lang.String))"]
            pub fn compareTo_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"compareTo",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[compareToIgnoreCase](https://developer.android.com/reference/java/lang/String.html#compareToIgnoreCase(java.lang.String))"]
            pub fn compareToIgnoreCase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"compareToIgnoreCase",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[regionMatches](https://developer.android.com/reference/java/lang/String.html#regionMatches(int,%20java.lang.String,%20int,%20int))"]
            pub fn regionMatches_int_String_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: impl ::java_spaghetti::AsArg<String>,
                arg2: i32,
                arg3: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"regionMatches",
                                c"(ILjava/lang/String;II)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[regionMatches](https://developer.android.com/reference/java/lang/String.html#regionMatches(boolean,%20int,%20java.lang.String,%20int,%20int))"]
            pub fn regionMatches_boolean_int_String_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: bool,
                arg1: i32,
                arg2: impl ::java_spaghetti::AsArg<String>,
                arg3: i32,
                arg4: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg3),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg4),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"regionMatches",
                                c"(ZILjava/lang/String;II)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startsWith](https://developer.android.com/reference/java/lang/String.html#startsWith(java.lang.String,%20int))"]
            pub fn startsWith_String_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startsWith",
                                c"(Ljava/lang/String;I)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[startsWith](https://developer.android.com/reference/java/lang/String.html#startsWith(java.lang.String))"]
            pub fn startsWith_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"startsWith",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[endsWith](https://developer.android.com/reference/java/lang/String.html#endsWith(java.lang.String))"]
            pub fn endsWith<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"endsWith",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[hashCode](https://developer.android.com/reference/java/lang/String.html#hashCode())"]
            pub fn hashCode<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"hashCode", c"()I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[indexOf](https://developer.android.com/reference/java/lang/String.html#indexOf(int))"]
            pub fn indexOf_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"indexOf", c"(I)I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[indexOf](https://developer.android.com/reference/java/lang/String.html#indexOf(int,%20int))"]
            pub fn indexOf_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"indexOf", c"(II)I"))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[lastIndexOf](https://developer.android.com/reference/java/lang/String.html#lastIndexOf(int))"]
            pub fn lastIndexOf_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[lastIndexOf](https://developer.android.com/reference/java/lang/String.html#lastIndexOf(int,%20int))"]
            pub fn lastIndexOf_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(II)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[indexOf](https://developer.android.com/reference/java/lang/String.html#indexOf(java.lang.String))"]
            pub fn indexOf_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOf",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[indexOf](https://developer.android.com/reference/java/lang/String.html#indexOf(java.lang.String,%20int))"]
            pub fn indexOf_String_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"indexOf",
                                c"(Ljava/lang/String;I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[lastIndexOf](https://developer.android.com/reference/java/lang/String.html#lastIndexOf(java.lang.String))"]
            pub fn lastIndexOf_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(Ljava/lang/String;)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[lastIndexOf](https://developer.android.com/reference/java/lang/String.html#lastIndexOf(java.lang.String,%20int))"]
            pub fn lastIndexOf_String_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<i32, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"lastIndexOf",
                                c"(Ljava/lang/String;I)I",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[substring](https://developer.android.com/reference/java/lang/String.html#substring(int))"]
            pub fn substring_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"substring",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[substring](https://developer.android.com/reference/java/lang/String.html#substring(int,%20int))"]
            pub fn substring_int_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"substring",
                                c"(II)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[concat](https://developer.android.com/reference/java/lang/String.html#concat(java.lang.String))"]
            pub fn concat<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"concat",
                                c"(Ljava/lang/String;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[replace](https://developer.android.com/reference/java/lang/String.html#replace(char,%20char))"]
            pub fn replace_char_char<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: u16,
                arg1: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replace",
                                c"(CC)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[matches](https://developer.android.com/reference/java/lang/String.html#matches(java.lang.String))"]
            pub fn matches<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"matches",
                                c"(Ljava/lang/String;)Z",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[replaceFirst](https://developer.android.com/reference/java/lang/String.html#replaceFirst(java.lang.String,%20java.lang.String))"]
            pub fn replaceFirst<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replaceFirst",
                                c"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[replaceAll](https://developer.android.com/reference/java/lang/String.html#replaceAll(java.lang.String,%20java.lang.String))"]
            pub fn replaceAll<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"replaceAll",
                                c"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[split](https://developer.android.com/reference/java/lang/String.html#split(java.lang.String,%20int))"]
            pub fn split_String_int<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<String, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"split",
                                c"(Ljava/lang/String;I)[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[split](https://developer.android.com/reference/java/lang/String.html#split(java.lang.String))"]
            pub fn split_String<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<String, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"split",
                                c"(Ljava/lang/String;)[Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toLowerCase](https://developer.android.com/reference/java/lang/String.html#toLowerCase())"]
            pub fn toLowerCase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toLowerCase",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toUpperCase](https://developer.android.com/reference/java/lang/String.html#toUpperCase())"]
            pub fn toUpperCase<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toUpperCase",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[trim](https://developer.android.com/reference/java/lang/String.html#trim())"]
            pub fn trim<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"trim",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[strip](https://developer.android.com/reference/java/lang/String.html#strip())"]
            pub fn strip<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"strip",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[stripLeading](https://developer.android.com/reference/java/lang/String.html#stripLeading())"]
            pub fn stripLeading<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stripLeading",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[stripTrailing](https://developer.android.com/reference/java/lang/String.html#stripTrailing())"]
            pub fn stripTrailing<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"stripTrailing",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[isBlank](https://developer.android.com/reference/java/lang/String.html#isBlank())"]
            pub fn isBlank<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"isBlank", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/java/lang/String.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toCharArray](https://developer.android.com/reference/java/lang/String.html#toCharArray())"]
            pub fn toCharArray<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::CharArray>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toCharArray",
                                c"()[C",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[format](https://developer.android.com/reference/java/lang/String.html#format(java.lang.String,%20java.lang.Object...))"]
            pub fn format_String_Object_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<Object, Throwable>>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"format",
                                c"(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(java.lang.Object))"]
            pub fn valueOf_Object<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Object>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(Ljava/lang/Object;)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(char[]))"]
            pub fn valueOf_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"([C)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(char[],%20int,%20int))"]
            pub fn valueOf_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"([CII)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[copyValueOf](https://developer.android.com/reference/java/lang/String.html#copyValueOf(char[],%20int,%20int))"]
            pub fn copyValueOf_char_array_int_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
                arg1: i32,
                arg2: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg2),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"copyValueOf",
                                c"([CII)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[copyValueOf](https://developer.android.com/reference/java/lang/String.html#copyValueOf(char[]))"]
            pub fn copyValueOf_char_array<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::CharArray>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"copyValueOf",
                                c"([C)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(boolean))"]
            pub fn valueOf_boolean<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: bool,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(Z)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(char))"]
            pub fn valueOf_char<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: u16,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(C)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(int))"]
            pub fn valueOf_int<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(long))"]
            pub fn valueOf_long<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: i64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(J)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(float))"]
            pub fn valueOf_float<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: f32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(F)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[valueOf](https://developer.android.com/reference/java/lang/String.html#valueOf(double))"]
            pub fn valueOf_double<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: f64,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                __jni_class,
                                c"valueOf",
                                c"(D)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[intern](https://developer.android.com/reference/java/lang/String.html#intern())"]
            pub fn intern<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"intern",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[repeat](https://developer.android.com/reference/java/lang/String.html#repeat(int))"]
            pub fn repeat<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: i32,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"repeat",
                                c"(I)Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
        #[doc = "pub class [Throwable](https://developer.android.com/reference/java/lang/Throwable.html)"]
        pub enum Throwable {}
        unsafe impl ::java_spaghetti::ReferenceType for Throwable {}
        unsafe impl ::java_spaghetti::JniType for Throwable {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/lang/Throwable")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<Object> for Throwable {}
        impl Throwable {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<Object>> = ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/lang/Throwable"))
                            .as_global()
                    })
                    .as_raw()
            }
            #[doc = "[Throwable](https://developer.android.com/reference/java/lang/Throwable.html#Throwable())"]
            pub fn new<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"<init>", c"()V"))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[Throwable](https://developer.android.com/reference/java/lang/Throwable.html#Throwable(java.lang.String))"]
            pub fn new_String<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[Throwable](https://developer.android.com/reference/java/lang/Throwable.html#Throwable(java.lang.String,%20java.lang.Throwable))"]
            pub fn new_String_Throwable<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<String>,
                arg1: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [
                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                    ];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/String;Ljava/lang/Throwable;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[Throwable](https://developer.android.com/reference/java/lang/Throwable.html#Throwable(java.lang.Throwable))"]
            pub fn new_Throwable<'env>(
                __jni_env: ::java_spaghetti::Env<'env>,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<::java_spaghetti::Local<'env, Self>, ::java_spaghetti::Local<'env, Throwable>>
            {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"<init>",
                                c"(Ljava/lang/Throwable;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getMessage](https://developer.android.com/reference/java/lang/Throwable.html#getMessage())"]
            pub fn getMessage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getMessage",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getLocalizedMessage](https://developer.android.com/reference/java/lang/Throwable.html#getLocalizedMessage())"]
            pub fn getLocalizedMessage<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getLocalizedMessage",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getCause](https://developer.android.com/reference/java/lang/Throwable.html#getCause())"]
            pub fn getCause<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getCause",
                                c"()Ljava/lang/Throwable;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[initCause](https://developer.android.com/reference/java/lang/Throwable.html#initCause(java.lang.Throwable))"]
            pub fn initCause<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"initCause",
                                c"(Ljava/lang/Throwable;)Ljava/lang/Throwable;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[toString](https://developer.android.com/reference/java/lang/Throwable.html#toString())"]
            pub fn toString<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, String>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"toString",
                                c"()Ljava/lang/String;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[printStackTrace](https://developer.android.com/reference/java/lang/Throwable.html#printStackTrace())"]
            pub fn printStackTrace<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"printStackTrace",
                                c"()V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[fillInStackTrace](https://developer.android.com/reference/java/lang/Throwable.html#fillInStackTrace())"]
            pub fn fillInStackTrace<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, Throwable>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"fillInStackTrace",
                                c"()Ljava/lang/Throwable;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getStackTrace](https://developer.android.com/reference/java/lang/Throwable.html#getStackTrace())"]
            pub fn getStackTrace<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<
                    ::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<StackTraceElement, Throwable>>,
                >,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getStackTrace",
                                c"()[Ljava/lang/StackTraceElement;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[setStackTrace](https://developer.android.com/reference/java/lang/Throwable.html#setStackTrace(java.lang.StackTraceElement[]))"]
            pub fn setStackTrace<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<::java_spaghetti::ObjectArray<StackTraceElement, Throwable>>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"setStackTrace",
                                c"([Ljava/lang/StackTraceElement;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[addSuppressed](https://developer.android.com/reference/java/lang/Throwable.html#addSuppressed(java.lang.Throwable))"]
            pub fn addSuppressed<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
                arg0: impl ::java_spaghetti::AsArg<Throwable>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"addSuppressed",
                                c"(Ljava/lang/Throwable;)V",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[getSuppressed](https://developer.android.com/reference/java/lang/Throwable.html#getSuppressed())"]
            pub fn getSuppressed<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, ::java_spaghetti::ObjectArray<Throwable, Throwable>>>,
                ::java_spaghetti::Local<'env, Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"getSuppressed",
                                c"()[Ljava/lang/Throwable;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }

    pub mod util {
        #[doc = "pub interface [Iterator](https://developer.android.com/reference/java/util/Iterator.html)"]
        pub enum Iterator {}
        unsafe impl ::java_spaghetti::ReferenceType for Iterator {}
        unsafe impl ::java_spaghetti::JniType for Iterator {
            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                callback(c"java/util/Iterator")
            }
        }
        unsafe impl ::java_spaghetti::AssignableTo<super::lang::Object> for Iterator {}
        impl Iterator {
            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                static __CLASS: ::std::sync::OnceLock<::java_spaghetti::Global<super::lang::Object>> =
                    ::std::sync::OnceLock::new();
                __CLASS
                    .get_or_init(|| unsafe {
                        ::java_spaghetti::Local::from_raw(__jni_env, __jni_env.require_class(c"java/util/Iterator")).as_global()
                    })
                    .as_raw()
            }
            #[doc = "[hasNext](https://developer.android.com/reference/java/util/Iterator.html#hasNext())"]
            pub fn hasNext<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<bool, ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"hasNext", c"()Z"))
                        })
                        .as_raw();
                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[next](https://developer.android.com/reference/java/util/Iterator.html#next())"]
            pub fn next<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<
                ::std::option::Option<::java_spaghetti::Local<'env, super::lang::Object>>,
                ::java_spaghetti::Local<'env, super::lang::Throwable>,
            > {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                __jni_class,
                                c"next",
                                c"()Ljava/lang/Object;",
                            ))
                        })
                        .as_raw();
                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
            #[doc = "[remove](https://developer.android.com/reference/java/util/Iterator.html#remove())"]
            pub fn remove<'env>(
                self: &::java_spaghetti::Ref<'env, Self>,
            ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::lang::Throwable>> {
                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                unsafe {
                    let __jni_args = [];
                    let __jni_env = self.env();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    let __jni_method = __METHOD
                        .get_or_init(|| {
                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(__jni_class, c"remove", c"()V"))
                        })
                        .as_raw();
                    __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                }
            }
        }
    }
}
